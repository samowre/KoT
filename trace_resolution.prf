(trace_resolution
 (index_TCC1 0
  (index_TCC1-1 nil 3482675376 3483137861 ("" (subtype-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   122 80 nil nil))
 (index_TCC2 0
  (index_TCC2-1 nil 3482675376 3483137861 ("" (subtype-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   71 60 nil nil))
 (index_inj 0
  (index_inj-1 nil 3483128522 3483128592 ("" (grind) nil nil) unchecked
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (injective? const-decl "bool" functions nil)
    (index const-decl "posnat" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   221 130 t shostak))
 (IMP_sortedlist_TCC1 0
  (IMP_sortedlist_TCC1-1 nil 3482675376 3483137861 ("" (grind) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (injective? const-decl "bool" functions nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   142 120 t nil))
 (tr_clause_prop_TCC1 0
  (tr_clause_prop_TCC1-1 nil 3482675376 3483137861
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil))
   31 20 nil nil))
 (tr_clause_prop_TCC2 0
  (tr_clause_prop_TCC2-1 nil 3482675376 3483137861
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil))
   21 20 nil nil))
 (tr_clause_true?_TCC1 0
  (tr_clause_true?_TCC1-1 nil 3482783478 3483137861
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (delete -1 -2 -4 -5) (("" (grind) nil nil)) nil)) nil))
    nil)
   proved
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   91 70 t nil))
 (tr_clause_true?_TCC2 0
  (tr_clause_true?_TCC2-1 nil 3482783478 3483137862
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (hide -1 -4)
        (("" (expand tr_clause? -1)
          (("" (lemma sorted_prop)
            (("" (inst -1 cl!1)
              (("" (flatten)
                (("" (delete -2)
                  (("" (assert)
                    (("" (split -1)
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sorted? def-decl "bool" sortedlist nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (sorted_prop formula-decl nil sortedlist nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   176 160 t nil))
 (tr_clause_true?_TCC3 0
  (tr_clause_true?_TCC3-1 nil 3482783478 3483137862
   ("" (skolem!)
    (("" (flatten)
      (("" (typepred cl!1)
        (("" (hide -1)
          (("" (use sorted_prop)
            (("" (expand tr_clause? -2)
              (("" (assert)
                (("" (delete 1) (("" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sorted? def-decl "bool" sortedlist nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted_prop formula-decl nil sortedlist nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil))
   180 150 t nil))
 (tr_clause_true?_TCC4 0
  (tr_clause_true?_TCC4-1 nil 3482783478 3483137862
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted? def-decl "bool" sortedlist nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   99 80 nil nil))
 (delete_pivot_TCC1 0
  (delete_pivot_TCC1-1 nil 3482675376 3483137862
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (member def-decl "bool" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil))
   129 110 t nil))
 (delete_pivot_TCC2 0
  (delete_pivot_TCC2-1 nil 3482675376 3483137862
   ("" (subtype-tcc)
    (("1" (hide -1 -4)
      (("1"
        (use subset_member ("k" "cdr(ckk!1)" "l" "cons(k!1, ckk!1)"))
        (("1" (replace -1)
          (("1" (expand list2set 2 2)
            (("1" (expand list2set 2 2)
              (("1" (expand subset? 2)
                (("1" (skolem-typepred)
                  (("1" (flatten) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (delete -1 -4)
      (("2" (lemma tr_clause_prop)
        (("2" (inst -1 "cons(k!1, ckk!1)")
          (("2" (flatten)
            (("2" (delete -2)
              (("2" (expand tr_clause? -1 1)
                (("2" (flatten)
                  (("2" (hide -1)
                    (("2" (lemma tr_clause_prop)
                      (("2" (inst -1 ckk!1)
                        (("2" (flatten)
                          (("2" (hide -2)
                            (("2" (rewrite -2)
                              (("2"
                                (split -1)
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil)
                                 ("3"
                                  (flatten)
                                  (("3"
                                    (expand tr_clause? -2)
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (member def-decl "bool" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   52 30 t nil))
 (delete_pivot_TCC3 0
  (delete_pivot_TCC3-1 nil 3482675376 3483137862
   ("" (skolem-typepred)
    (("" (hide -1)
      (("" (split 1)
        (("1" (expand tr_clause? 1) (("1" (propax) nil nil)) nil)
         ("2" (skolem-typepred)
          (("2" (typepred "remove(-pivot!1, remove(pivot!1, ck!1))")
            (("1" (hide -1)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (inst -3 l!1)
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (typepred "remove(pivot!1, ck!1)")
                          (("1" (hide -1)
                            (("1" (inst -2 l!1)
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (inst -3 l!1)
                    (("2" (flatten)
                      (("2" (hide -3)
                        (("2" (assert)
                          (("2" (hide 3)
                            (("2" (split 3)
                              (("1"
                                (lemma index_inj)
                                (("1"
                                  (expand injective?)
                                  (("1"
                                    (inst -1 l!1 "-pivot!1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "remove(pivot!1, ck!1)")
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (inst -2 l!1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (delete -2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma index_inj)
                                            (("2"
                                              (expand injective?)
                                              (("2"
                                                (inst -1 l!1 "pivot!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma index_inj)
              (("2" (assert)
                (("2" (hide -2 -3 -4 -5 -6 -7 -8 2)
                  (("2" (expand injective?) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((index_inj formula-decl nil trace_resolution nil)
    (injective? const-decl "bool" functions nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (sorted? def-decl "bool" sortedlist nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (remove def-decl "{sBB |
         FORALL f:
           member(f, sBB) <=> (NOT key(f) = key(e)) AND member(f, sAA)}"
      sortedlist nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (member def-decl "bool" list_props nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   153 110 t nil))
 (exist_pivot?_TCC1 0
  (exist_pivot?_TCC1-1 nil 3482760987 3483137862
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted? def-decl "bool" sortedlist nil)
    (member def-decl "bool" list_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil))
   218 180 t nil))
 (exist_pivot?_TCC2 0
  (exist_pivot?_TCC2-1 nil 3482760987 3483137862
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted? def-decl "bool" sortedlist nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   105 80 nil nil))
 (exist_lemma 0
  (exist_lemma-1 nil 3482764467 3482764471 ("" (postpone) nil nil)
   unfinished nil 4150 0 t shostak))
 (find_pivot_TCC1 0
  (find_pivot_TCC1-1 nil 3482760023 3483137862
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (exist_pivot? def-decl "bool" trace_resolution nil))
   42 30 nil nil))
 (find_pivot_TCC2 0
  (find_pivot_TCC2-1 nil 3482760023 3483137863
   ("" (skolem-typepred)
    (("" (hide -1 -4)
      (("" (flatten)
        (("" (split) (("1" (grind) nil nil) ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (member def-decl "bool" list_props nil)
    (sorted? def-decl "bool" sortedlist nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   73 60 t nil))
 (find_pivot_TCC3 0
  (find_pivot_TCC3-1 nil 3482760023 3483137863
   ("" (skolem-typepred)
    (("" (hide -1 -4 -10)
      (("" (flatten)
        (("" (split)
          (("1" (assert) (("1" (grind) nil nil)) nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member def-decl "bool" list_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   78 60 t nil))
 (find_pivot_TCC4 0
  (find_pivot_TCC4-1 nil 3482760023 3483137863
   ("" (skolem-typepred)
    (("" (hide -1 -4 -10)
      (("" (flatten)
        (("" (split) (("1" (grind) nil nil) ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (sorted? def-decl "bool" sortedlist nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (member def-decl "bool" list_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   275 230 t nil))
 (find_pivot_TCC5 0
  (find_pivot_TCC5-1 nil 3482760023 3483137863
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted? def-decl "bool" sortedlist nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil))
   240 210 t nil))
 (find_pivot_TCC6 0
  (find_pivot_TCC6-1 nil 3482760023 3483137863
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (sorted? def-decl "bool" sortedlist nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (member def-decl "bool" list_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil))
   275 220 nil nil))
 (find_pivot_TCC7 0
  (find_pivot_TCC7-1 nil 3482760023 3483137864
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted? def-decl "bool" sortedlist nil)
    (member def-decl "bool" list_props nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (exist_pivot? def-decl "bool" trace_resolution nil))
   446 400 t nil))
 (find_pivot_TCC8 0
  (find_pivot_TCC8-1 nil 3482760987 3483137864
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted? def-decl "bool" sortedlist nil)
    (member def-decl "bool" list_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (exist_pivot? def-decl "bool" trace_resolution nil))
   350 280 t nil))
 (merge_TCC1 0
  (merge_TCC1-1 nil 3482675376 3483137864
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (member def-decl "bool" list_props nil)
    (sorted? def-decl "bool" sortedlist nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil))
   124 100 t nil))
 (merge_TCC2 0
  (merge_TCC2-1 nil 3482675376 3483137865
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (member def-decl "bool" list_props nil)
    (sorted? def-decl "bool" sortedlist nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil))
   189 150 t nil))
 (merge_TCC3 0
  (merge_TCC3-1 nil 3482675376 3483137865
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted? def-decl "bool" sortedlist nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil))
   367 300 t nil))
 (merge_TCC4 0
  (merge_TCC4-1 nil 3482675376 3483137865
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted? def-decl "bool" sortedlist nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil))
   369 300 t nil))
 (merge_TCC5 0
  (merge_TCC5-1 nil 3482675376 3483137865
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted? def-decl "bool" sortedlist nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   186 160 nil nil))
 (merge_TCC6 0
  (merge_TCC6-1 nil 3482675376 3483137873
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (split 3)
            (("1" (hide -2 -3 -5 -8)
              (("1" (typepred "v!1(ckk!1, cll!1)")
                (("1" (hide -1)
                  (("1" (lemma tr_clause_prop)
                    (("1"
                      (inst -1
                       "cons[((tr_literal?))](k!1, v!1(ckk!1, cll!1))")
                      (("1" (flatten)
                        (("1" (hide -1)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (inst -2 "car(v!1(ckk!1, cll!1))")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide -3)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand member -2 1)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (lemma sorted_clause)
                                            (("1"
                                              (inst
                                               -1
                                               "car(v!1(ckk!1, cll!1))"
                                               ck!1)
                                              (("1"
                                                (replace -8 -1)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma sorted_prop)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "cons(k!1, ckk!1)")
                                                  (("2"
                                                    (replace -8 -5)
                                                    (("2"
                                                      (expand
                                                       tr_clause?
                                                       -5)
                                                      (("2"
                                                        (replace -5)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma sorted_prop)
                                                (("3"
                                                  (inst
                                                   -1
                                                   "cons(l!1, cll!1)")
                                                  (("3"
                                                    (replace -10 -6)
                                                    (("3"
                                                      (expand
                                                       tr_clause?
                                                       -6)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (split -1)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               tr_clause?
                                                               1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (lemma tr_clause_prop)
                                                (("4"
                                                  (inst -1 ck!1)
                                                  (("4"
                                                    (replace -5)
                                                    (("4"
                                                      (flatten)
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (replace
                                                           -8
                                                           -1)
                                                          (("4"
                                                            (assert)
                                                            (("4"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace -8 2)
                                            (("2"
                                              (lemma sorted_prop)
                                              (("2"
                                                (expand tr_clause? -6)
                                                (("2"
                                                  (inst -1 cl!1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -10 -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           sorted_clause)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "car(v!1(ckk!1, cll!1))"
                                                             cl!1)
                                                            (("1"
                                                              (replace
                                                               -11
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (lemma
                                                               sorted_prop)
                                                              (("3"
                                                                (inst
                                                                 -1
                                                                 ck!1)
                                                                (("3"
                                                                  (expand
                                                                   tr_clause?
                                                                   -6)
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (replace
                                                                       -9
                                                                       -1)
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (expand
                                                                           tr_clause?
                                                                           1)
                                                                          (("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma sorted_prop)
                                  (("2"
                                    (inst -1 cl!1)
                                    (("2"
                                      (expand tr_clause? -5)
                                      (("2"
                                        (assert)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (lemma sorted_prop)
                                  (("3"
                                    (inst -1 ck!1)
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma sorted_prop)
                        (("2" (inst -1 cl!1) (("2" (grind) nil nil))
                          nil))
                        nil)
                       ("3" (lemma sorted_prop)
                        (("3" (inst -1 ck!1) (("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma sorted_prop)
                  (("2" (lemma sorted_prop)
                    (("2" (inst -1 cl!1)
                      (("2" (hide -2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (lemma sorted_prop)
                  (("3" (inst -1 ck!1) (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 -3 -5 -8)
              (("2" (lemma sorted_prop)
                (("2" (inst-cp -1 ck!1)
                  (("2" (inst -1 cl!1)
                    (("2" (delete -1 -2)
                      (("2" (lemma tr_clause_prop)
                        (("2" (inst-cp -1 ck!1)
                          (("2" (inst -1 cl!1)
                            (("2" (assert)
                              (("2"
                                (replace -7 -2)
                                (("2"
                                  (replace -9 -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (case "tr_clause?(cll!1)")
                                      (("1"
                                        (case "tr_clause?(ckk!1)")
                                        (("1"
                                          (skolem-typepred)
                                          (("1"
                                            (typepred
                                             "v!1(ckk!1, cll!1)")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand member -1)
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (inst -3 k!2)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (inst -3 k!2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           member
                                                           -1)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst -3 k!2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil)
                                             ("3" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((ckk!1 skolem-const-decl "list[(tr_literal?)]" trace_resolution
     nil)
    (cll!1 skolem-const-decl "list[(tr_literal?)]" trace_resolution
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (sorted? def-decl "bool" sortedlist nil)
    (ck!1 skolem-const-decl "(tr_clause?)" trace_resolution nil)
    (sorted_prop formula-decl nil sortedlist nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (sorted_clause formula-decl nil sortedlist nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tr_clause_prop formula-decl nil trace_resolution nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   7168 5290 t nil))
 (merge_TCC7 0
  (merge_TCC7-1 nil 3482675376 3483137873
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted? def-decl "bool" sortedlist nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil))
   748 610 t nil))
 (merge_TCC8 0
  (merge_TCC8-1 nil 3482675376 3483137874
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (sorted? def-decl "bool" sortedlist nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   226 200 nil nil))
 (merge_TCC9 0
  (merge_TCC9-1 nil 3482675376 3483137876
   ("" (skolem-typepred)
    (("" (hide -1 -3 -7)
      (("" (flatten)
        (("" (skolem-typepred)
          (("" (flatten)
            (("" (hide -2)
              (("" (split 4)
                (("1" (lemma tr_clause_prop)
                  (("1"
                    (inst -1
                     "cons[((tr_literal?))](k!1, v!1(ckk!1, cl!1))")
                    (("1" (flatten)
                      (("1" (delete -1)
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (typepred "v!1(ckk!1, cl!1)")
                              (("1"
                                (hide -1)
                                (("1"
                                  (inst -2 "car(v!1(ckk!1, cl!1))")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand member -2 1)
                                      (("1"
                                        (split -2)
                                        (("1"
                                          (lemma sorted_clause)
                                          (("1"
                                            (inst
                                             -1
                                             "car(v!1(ckk!1, cl!1))"
                                             "ck!1")
                                            (("1"
                                              (replace -8 -1)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (expand tr_clause? -4)
                                              (("2" (propax) nil nil))
                                              nil)
                                             ("3"
                                              (lemma tr_clause_prop)
                                              (("3"
                                                (inst -1 ck!1)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma sorted_clause)
                                          (("2"
                                            (inst
                                             -1
                                             "car(v!1(ckk!1, cl!1))"
                                             "cl!1")
                                            (("1"
                                              (replace -10 -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand member -1)
                                                  (("1"
                                                    (replace -9 -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3"
                                              (lemma tr_clause_prop)
                                              (("3"
                                                (inst -1 ck!1)
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma tr_clause_prop)
                                    (("2"
                                      (inst -1 ck!1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma tr_clause_prop)
                                (("2"
                                  (inst -1 ck!1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma tr_clause_prop)
                      (("2" (inst -1 ck!1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skolem-typepred)
                  (("2" (split 1)
                    (("1" (flatten)
                      (("1" (expand member -1)
                        (("1" (split -1)
                          (("1" (grind) nil nil)
                           ("2" (typepred "v!1(ckk!1, cl!1)")
                            (("1" (hide -1)
                              (("1"
                                (inst -2 k!2)
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma tr_clause_prop)
                              (("2"
                                (inst -1 ck!1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split -1)
                        (("1" (replace -7 -1)
                          (("1" (expand member -1)
                            (("1" (split -1)
                              (("1" (grind) nil nil)
                               ("2"
                                (typepred "v!1(ckk!1, cl!1)")
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (inst -2 k!2)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma tr_clause_prop)
                                  (("2"
                                    (inst -1 ck!1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "v!1(ckk!1, cl!1)")
                          (("1" (hide -1)
                            (("1" (inst -2 k!2)
                              (("1"
                                (flatten)
                                (("1"
                                  (delete -2)
                                  (("1"
                                    (expand member 1)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma tr_clause_prop)
                            (("2" (inst -1 ck!1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((tr_clause_prop formula-decl nil trace_resolution nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cl!1 skolem-const-decl "(tr_clause?)" trace_resolution nil)
    (sorted_clause formula-decl nil sortedlist nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (ck!1 skolem-const-decl "(tr_clause?)" trace_resolution nil)
    (sorted? def-decl "bool" sortedlist nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ckk!1 skolem-const-decl "list[(tr_literal?)]" trace_resolution
     nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   2462 2070 t nil))
 (merge_TCC10 0
  (merge_TCC10-1 nil 3482675376 3483137877
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted? def-decl "bool" sortedlist nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil))
   724 580 t nil))
 (merge_TCC11 0
  (merge_TCC11-1 nil 3482675376 3483137877
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (sorted? def-decl "bool" sortedlist nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   227 180 nil nil))
 (merge_TCC12 0
  (merge_TCC12-1 nil 3482675376 3483137878
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (hide -2 -3 -5 -8)
            (("" (lemma tr_clause_prop)
              (("" (inst-cp -1 ck!1)
                (("" (inst -1 cl!1)
                  (("" (assert)
                    (("" (replace -7 -2)
                      (("" (replace -8 -1)
                        (("" (assert)
                          (("" (case "tr_clause?(cll!1)")
                            (("1" (case "tr_clause?(ckk!1)")
                              (("1"
                                (split 5)
                                (("1"
                                  (lemma tr_clause_prop)
                                  (("1"
                                    (inst
                                     -1
                                     "cons[((tr_literal?))](l!1, v!1(ck!1, cll!1))")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (delete -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (typepred
                                               "v!1(ck!1, cll!1)")
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (lemma sorted_clause)
                                                  (("1"
                                                    (inst
                                                     -3
                                                     "car(v!1(ck!1, cll!1))")
                                                    (("1"
                                                      (expand
                                                       member
                                                       -3
                                                       1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -3)
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "car(v!1(ck!1, cll!1))"
                                                             "ck!1")
                                                            (("1"
                                                              (replace
                                                               -12
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -11
                                                                   1
                                                                   RL)
                                                                  (("1"
                                                                    (expand
                                                                     member
                                                                     -1)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -11
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -11
                                                                             -1
                                                                             RL)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               3)
                                                                              (("1"
                                                                                (lemma
                                                                                 index_inj)
                                                                                (("1"
                                                                                  (expand
                                                                                   injective?)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     k!1
                                                                                     l!1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -11
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               tr_clause?
                                                               -8)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             -2
                                                             "car(v!1(ck!1, cll!1))"
                                                             "cl!1")
                                                            (("1"
                                                              (replace
                                                               -13
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               tr_clause?
                                                               -9)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skolem-typepred)
                                  (("2"
                                    (split 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand member -1)
                                        (("1"
                                          (split -1)
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (typepred
                                             "v!1(ck!1, cll!1)")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (inst -2 k!2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand member 2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replace -14 3)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (typepred "v!1(ck!1, cll!1)")
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (inst -2 k!2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand member 1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (expand member 1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (replace -12 -1)
                                              (("2"
                                                (expand member -1)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (typepred
                                                     "v!1(ck!1, cll!1)")
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (inst -2 k!2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((tr_clause_prop formula-decl nil trace_resolution nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (sorted_clause formula-decl nil sortedlist nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (injective? const-decl "bool" functions nil)
    (index_inj formula-decl nil trace_resolution nil)
    (ck!1 skolem-const-decl "(tr_clause?)" trace_resolution nil)
    (sorted? def-decl "bool" sortedlist nil)
    (cl!1 skolem-const-decl "(tr_clause?)" trace_resolution nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cll!1 skolem-const-decl "list[(tr_literal?)]" trace_resolution
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1246 1000 t nil))
 (merge_includes1_TCC1 0
  (merge_includes1_TCC1-1 nil 3482760023 3483137878
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil))
   31 20 nil nil))
 (merge_includes1_TCC2 0
  (merge_includes1_TCC2-1 nil 3482760023 3483137878
   ("" (skolem-typepred)
    (("" (typepred "merge(ck!1, cl!1)")
      (("" (expand tr_clause? -2) (("" (propax) nil nil)) nil)) nil))
    nil)
   proved
   ((merge def-decl "{cla: (tr_clause?) |
         FORALL k: member(k, cla) IFF (member(k, ck) OR member(k, cl))}"
           trace_resolution nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   22 10 t nil))
 (merge_includes1_TCC3 0
  (merge_includes1_TCC3-1 nil 3482760023 3483137878
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil))
   26 30 nil nil))
 (resolution_TCC1 0
  (resolution_TCC1-1 nil 3482764464 3483138087
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              (("" (hide -4 -7 -10)
                (("" (split 4)
                  (("1" (inst -5 pivot!1) (("1" (assert) nil nil)) nil)
                   ("2" (inst -5 "-pivot!1")
                    (("1" (use member_tr_lit_member_nzint)
                      (("1" (replace -1 1)
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (lemma member_tr_lit_member_nzint)
                              (("1"
                                (inst -1 "-pivot!1" "ncl!1")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (delete -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 2 3 4 5)
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nck!1 skolem-const-decl "(ne_tr_clause?)" trace_resolution nil)
    (ncl!1 skolem-const-decl "(ne_tr_clause?)" trace_resolution nil)
    (pivot!1 skolem-const-decl
     "{k | member(k, nck!1) AND member(-k, ncl!1)}" trace_resolution
     nil)
    (member_tr_lit_member_nzint formula-decl nil trace_resolution nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   28532 160 t nil))
 (resolution_lemma_TCC1 0
  (resolution_lemma_TCC1-1 nil 3482776948 3483137878
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil))
   66 40 nil nil))
 (resolution_lemma_TCC2 0
  (resolution_lemma_TCC2-1 nil 3482776948 3483137879
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil))
   88 70 nil nil))
 (resolution_lemma 0
  (resolution_lemma-1 nil 3482783534 3482797583
   ("" (skosimp)
    (("" (assert)
      (("" (split)
        (("1" (flatten)
          (("1" (split)
            (("1" (skosimp)
              (("1" (expand resolution)
                (("1" (expand not_true_clauses)
                  (("1" (flatten)
                    (("1" (replace 3 1)
                      (("1" (replace 4 1)
                        (("1" (replace -2 1)
                          (("1"
                            (typepred
                             "delete_pivot(merge(nck!1, ncl!1), find_pivot(nck!1, ncl!1))")
                            (("1" (hide -1)
                              (("1"
                                (inst -2 "k!1")
                                (("1"
                                  (typepred "merge(nck!1, ncl!1)")
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (inst -2 "k!1")
                                      (("1"
                                        (replace -5 -2)
                                        (("1"
                                          (replace -2 -4)
                                          (("1"
                                            (expand tr_clause_true? +)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (split)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (split)
                                                        (("1"
                                                          (typepred
                                                           ncl!1)
                                                          (("1"
                                                            (expand
                                                             ne_tr_clause?
                                                             -3)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide 4 8)
                                                            (("2"
                                                              (typepred
                                                               "find_pivot(nck!1, ncl!1)")
                                                              (("2"
                                                                (replace
                                                                 -5
                                                                 -4
                                                                 RL)
                                                                (("2"
                                                                  (case
                                                                   "-k!1 = find_pivot(nck!1, ncl!1)")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     -4
                                                                     RL)
                                                                    (("1"
                                                                      (lemma
                                                                       clause_true_lemma)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "nck!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             tr_clause_true?
                                                                             -1)
                                                                            (("1"
                                                                              (inst
                                                                               1
                                                                               "k!1")
                                                                              (("1"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   member_tr_lit_member_nzint)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "-k!1"
                                                                                     "nck!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (expand resolution)
                (("2" (expand not_true_clauses)
                  (("2" (flatten)
                    (("2" (replace 4 1)
                      (("2" (replace 3 1)
                        (("2" (replace -2 1)
                          (("2"
                            (typepred
                             "delete_pivot(merge(nck!1, ncl!1), find_pivot(nck!1, ncl!1))")
                            (("2" (hide -1)
                              (("2"
                                (inst -2 "l!1")
                                (("2"
                                  (replace -2 1)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (typepred
                                         "merge(nck!1, ncl!1)")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst -2 "l!1")
                                            (("1"
                                              (replace -2 1)
                                              (("1"
                                                (replace -6 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred
                                         "find_pivot(nck!1, ncl!1)")
                                        (("2"
                                          (replace -5 -3 RL)
                                          (("2"
                                            (case
                                             "-l!1 = -find_pivot(nck!1, ncl!1)")
                                            (("1"
                                              (replace -1 -5 RL)
                                              (("1"
                                                (expand
                                                 tr_clause_true?
                                                 3)
                                                (("1"
                                                  (lift-if 3)
                                                  (("1"
                                                    (split 3)
                                                    (("1"
                                                      (expand
                                                       member
                                                       -11)
                                                      (("1"
                                                        (lift-if -11)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           -11)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (lemma
                                                         clause_true_lemma)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "ncl!1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               tr_clause_true?
                                                               -1)
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "l!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (split)
            (("1" (expand resolution)
              (("1" (expand not_true_clauses)
                (("1" (flatten)
                  (("1" (replace 3 1)
                    (("1" (replace 4 1)
                      (("1" (replace 2 1)
                        (("1" (lemma merge_includes1)
                          (("1" (inst -1 "nck!1" "ncl!1")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand resolution)
              (("2" (expand not_true_clauses)
                (("2" (flatten)
                  (("2" (replace 2 1)
                    (("2" (replace 4 1)
                      (("2" (replace 3 1)
                        (("2" (lemma merge_includes1)
                          (("2" (inst -1 "nck!1" "ncl!1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((resolution const-decl "(tr_clause?)" trace_resolution nil)
    (find_pivot def-decl "{k | member(k, nck) AND member(-k, ncl)}"
     trace_resolution nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (merge def-decl "{cla: (tr_clause?) |
         FORALL k: member(k, cla) IFF (member(k, ck) OR member(k, cl))}"
           trace_resolution nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (delete_pivot const-decl "{cl |
         FORALL l:
           member(l, cl) <=>
            member(l, ck) AND (NOT l = pivot) AND (NOT l = -pivot)}"
     trace_resolution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (member def-decl "bool" list_props nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove def-decl "{sBB |
         FORALL f:
           member(f, sBB) <=> (NOT key(f) = key(e)) AND member(f, sAA)}"
      sortedlist nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sorted? def-decl "bool" sortedlist nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (member_tr_lit_member_nzint formula-decl nil trace_resolution nil)
    (clause_true_lemma formula-decl nil trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (merge_includes1 formula-decl nil trace_resolution nil))
   524390 2450 t shostak))
 (include_res 0
  (include_res-1 nil 3482776952 3482778442
   ("" (skolem-typepred)
    (("" (assert)
      (("" (flatten)
        (("" (split)
          (("1" (hide -1 -4)
            (("1" (lemma subset_include)
              (("1"
                (inst -1 "nck!1" "cons(find_pivot(nck!1, ncl!1),
                          resolution(nck!1, ncl!1))")
                (("1" (replace -1 1)
                  (("1" (lemma resolution_lemma)
                    (("1" (hide -2)
                      (("1" (inst -1 "nck!1" "ncl!1")
                        (("1" (assert)
                          (("1" (replace -6 -1)
                            (("1" (generalize nck!1 "nck")
                              (("1"
                                (induct nck)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (skolem-typepred)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (hide -2)
                                      (("2"
                                        (expand subset +)
                                        (("2"
                                          (expand tr_clause? -3)
                                          (("2"
                                            (expand sorted? -3)
                                            (("2"
                                              (lift-if -3)
                                              (("2"
                                                (split -3)
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     tr_clause?
                                                     -4
                                                     1)
                                                    (("2"
                                                      (replace -2 -4)
                                                      (("2"
                                                        (case
                                                         "null?(cons2_var!1)")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           ne_tr_clause?
                                                           -4)
                                                          (("2"
                                                            (replace
                                                             1
                                                             -4)
                                                            (("2"
                                                              (split 4)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skolem-typepred)
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (skolem-typepred)
                                      (("3"
                                        (flatten)
                                        (("3"
                                          (skolem-typepred)
                                          (("3"
                                            (flatten)
                                            (("3" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (skolem-typepred)
                                  (("4"
                                    (flatten)
                                    (("4"
                                      (skolem-typepred)
                                      (("4"
                                        (flatten)
                                        (("4"
                                          (hide -2)
                                          (("4" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (postpone) nil nil)
                               ("3" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 271708 23400 t shostak))
 (resolution_list_TCC1 0
  (resolution_list_TCC1-1 nil 3482675376 3483138262
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (hide -1 -3 -5)
        (("" (expand ne_tr_clause?) (("" (postpone) nil nil)) nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (length def-decl "nat" list_props nil))
   161792 20 t nil))
 (resolution_list_TCC2 0
  (resolution_list_TCC2-1 nil 3482776948 3483137879
   ("" (subtype-tcc) nil nil) unfinished nil 66 60 nil nil))
 (resolution_list_TCC3 0
  (resolution_list_TCC3-1 nil 3482776948 3483137879
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (delete_pivot const-decl "{cl |
         FORALL l:
           member(l, cl) <=>
            member(l, ck) AND (NOT l = pivot) AND (NOT l = -pivot)}"
     trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (length def-decl "nat" list_props nil))
   173 150 nil nil))
 (build_chain_list_TCC1 0
  (build_chain_list_TCC1-1 nil 3482675376 3483137879
   ("" (subtype-tcc) nil nil) proved nil 8 10 nil nil))
 (build_chain_list_TCC2 0
  (build_chain_list_TCC2-1 nil 3482675376 3483137879
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((map adt-def-decl "list[T1]" list_adt_map nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "nat" trace_resolution nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (chain type-eq-decl nil trace_resolution nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (clause_chain type-eq-decl nil trace_resolution nil)
    (certificate type-eq-decl nil trace_resolution nil))
   89 50 t nil))
 (resolve_rec_TCC1 0
  (resolve_rec_TCC1-1 nil 3482675376 3483137879
   ("" (subtype-tcc) nil nil) proved
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)) 9
   10 nil nil))
 (resolve_rec_TCC2 0
  (resolve_rec_TCC2-1 nil 3482675376 3483137879
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "nat" trace_resolution nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   12 10 nil nil))
 (resolve_rec_TCC3 0
  (resolve_rec_TCC3-1 nil 3482675376 3483137879
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "nat" trace_resolution nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   61 50 nil nil))
 (resolve_rec_TCC4 0
  (resolve_rec_TCC4-1 nil 3482675376 3483137879
   ("" (termination-tcc) nil nil) proved
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   15 10 nil nil))
 (resolve_rec_TCC5 0
  (resolve_rec_TCC5-1 nil 3482675376 3483137879
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "nat" trace_resolution nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   60 50 nil nil))
 (resolve_rec_TCC6 0
  (resolve_rec_TCC6-1 nil 3482675376 3483137879
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "nat" trace_resolution nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   37 20 nil nil))
 (resolve_rec_TCC7 0
  (resolve_rec_TCC7-1 nil 3482675376 3483137879
   ("" (termination-tcc) nil nil) proved
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   15 20 nil nil))
 (resolve_TCC1 0
  (resolve_TCC1-1 nil 3482107568 3483137879 ("" (subtype-tcc) nil nil)
   proved
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   16 0 nil nil)))

