(trace_resolution
 (tr_neg_TCC1 0
  (tr_neg_TCC1-1 nil 3483207953 3483218157 ("" (grind) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   63 40 t nil))
 (member_tr_lit_member_nzint 0
  (member_tr_lit_member_nzint-1 nil 3483143848 3483208278
   ("" (induct ll)
    (("1" (grind) nil nil)
     ("2" (skolem-typepred)
      (("2" (flatten)
        (("2" (skolem-typepred)
          (("2" (expand member 2)
            (("2" (case "k!1 = cons1_var!1")
              (("1" (grind) nil nil)
               ("2" (assert) (("2" (inst -5 k!1) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   129 50 t shostak))
 (subset_tr_lit_subset_nzint 0
  (subset_tr_lit_subset_nzint-1 nil 3483143971 3483208279
   ("" (induct kk)
    (("1" (grind) nil nil)
     ("2" (skolem-typepred)
      (("2" (flatten)
        (("2" (skolem-typepred)
          (("2" (expand subset 2)
            (("2" (case "member(cons1_var!1, ll!1)")
              (("1" (lemma member_tr_lit_member_nzint)
                (("1" (inst -1 cons1_var!1 ll!1)
                  (("1" (grind) nil nil)) nil))
                nil)
               ("2" (assert)
                (("2" (flatten)
                  (("2" (lemma member_tr_lit_member_nzint)
                    (("2" (inst -1 cons1_var!1 ll!1)
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (member_tr_lit_member_nzint formula-decl nil trace_resolution nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (subset def-decl "bool" minlist nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   254 160 t shostak))
 (index_TCC1 0
  (index_TCC1-1 nil 3482675376 3483218157 ("" (subtype-tcc) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   107 90 nil nil))
 (index_TCC2 0
  (index_TCC2-1 nil 3482675376 3483218157 ("" (subtype-tcc) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   68 50 nil nil))
 (index_inj 0
  (index_inj-1 nil 3483128522 3483208279 ("" (grind) nil nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (injective? const-decl "bool" functions nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   125 100 t shostak))
 (IMP_sortedlist_TCC1 0
  (IMP_sortedlist_TCC1-1 nil 3482675376 3483218157 ("" (grind) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (injective? const-decl "bool" functions nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   133 110 t nil))
 (tr_clause_prop_TCC1 0
  (tr_clause_prop_TCC1-1 nil 3482675376 3483218157
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil))
   16 20 nil nil))
 (tr_clause_prop_TCC2 0
  (tr_clause_prop_TCC2-1 nil 3482675376 3483218157
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil))
   33 20 nil nil))
 (tr_clause_prop 0
  (tr_clause_prop-1 nil 3483144141 3483208279
   ("" (skolem-typepred)
    (("" (expand tr_clause?) (("" (use sorted_prop) nil nil)) nil))
    nil)
   unfinished
   ((tr_clause? const-decl "bool" trace_resolution nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted_prop formula-decl nil sortedlist nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   62 40 t shostak))
 (cons_tr_clause 0
  (cons_tr_clause-1 nil 3483144192 3483208279
   ("" (skolem-typepred)
    (("" (use tr_clause_prop)
      (("" (assert)
        (("" (flatten) (("" (assert) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unfinished
   ((tr_clause_prop formula-decl nil trace_resolution nil)
    (sorted? def-decl "bool" sortedlist nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   96 80 t shostak))
 (tr_clause_true?_TCC1 0
  (tr_clause_true?_TCC1-1 nil 3482783478 3483218267
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (use cons_tr_clause)
        (("" (assert) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((sorted? def-decl "bool" sortedlist nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (cons_tr_clause formula-decl nil trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   63385 110 t nil))
 (tr_clause_true?_TCC2 0
  (tr_clause_true?_TCC2-1 nil 3482783478 3483218158
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (hide -1 -4)
        (("" (expand tr_clause? -1)
          (("" (lemma sorted_prop)
            (("" (inst -1 cl!1)
              (("" (flatten)
                (("" (delete -2)
                  (("" (assert)
                    (("" (split -1)
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((sorted_contains def-decl "bool" sortedlist nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sorted? def-decl "bool" sortedlist nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (sorted_prop formula-decl nil sortedlist nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   186 160 t nil))
 (tr_clause_true?_TCC3 0
  (tr_clause_true?_TCC3-1 nil 3482783478 3483218158
   ("" (skolem!)
    (("" (flatten)
      (("" (typepred cl!1)
        (("" (hide -1)
          (("" (use sorted_prop)
            (("" (expand tr_clause? -2)
              (("" (assert)
                (("" (delete 1) (("" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (sorted? def-decl "bool" sortedlist nil)
    (length def-decl "nat" list_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted_prop formula-decl nil sortedlist nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil))
   200 180 t nil))
 (clause_true_lemma 0
  (clause_true_lemma-1 nil 3483144275 3483208280
   ("" (induct cl)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem-typepred)
      (("3" (flatten)
        (("3" (expand tr_clause_true? 2)
          (("3" (hide -2)
            (("3" (lemma cons_tr_clause)
              (("3" (inst -1 "cons(cons1_var!1, cons2_var!1)")
                (("3" (assert)
                  (("3"
                    (case "EXISTS l:
             booleans.AND
                 (list_props[(tr_literal?)].member
                      (l,
                       list_adt[(tr_literal?)].cons
                           (cons1_var!1, cons2_var!1)),
                  list_props[integers.nzint].member
                      ((number_fields.-)(l),
                       list_adt[(tr_literal?)].cons
                           (cons1_var!1, cons2_var!1)))")
                    (("1" (assert)
                      (("1" (replace -1 2)
                        (("1" (skolem-typepred)
                          (("1" (flatten)
                            (("1" (expand member -2)
                              (("1"
                                (expand member -3)
                                (("1"
                                  (split -2)
                                  (("1"
                                    (split -3)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (replace -2 -1)
                                      (("2"
                                        (use contains_lemma)
                                        (("2"
                                          (case
                                           "list_props[(tr_literal?)].member
               ((number_fields.-)(cons1_var!1), cons2_var!1)")
                                          (("1"
                                            (replace -1 -2)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (delete
                                             -1
                                             -3
                                             -4
                                             -5
                                             -6
                                             -7
                                             -8
                                             2
                                             3
                                             4
                                             5)
                                            (("2"
                                              (use
                                               member_tr_lit_member_nzint)
                                              (("2"
                                                (replace -2 -1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (split -3)
                                    (("1"
                                      (case "-cons1_var!1 = l!1")
                                      (("1"
                                        (replace -1 -3 RL)
                                        (("1"
                                          (use contains_lemma)
                                          (("1"
                                            (replace -1 3)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (case
                                       "EXISTS l: member(l, cons2_var!1) AND member(-l, cons2_var!1)")
                                      (("1"
                                        (replace -1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (inst 1 "l!1")
                                        (("2"
                                          (split 1)
                                          (("1" (propax) nil nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (replace 1)
                        (("2" (assert)
                          (("2" (split -5)
                            (("1" (use contains_lemma)
                              (("1"
                                (replace -2 -1)
                                (("1"
                                  (inst 1 "cons1_var!1")
                                  (("1"
                                    (split 1)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (use member_tr_lit_member_nzint)
                                      (("2"
                                        (replace -1 1)
                                        (("2"
                                          (expand member 1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1)
                              (("2"
                                (skolem-typepred)
                                (("2"
                                  (inst 1 l!1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (cons_tr_clause formula-decl nil trace_resolution nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (member_tr_lit_member_nzint formula-decl nil trace_resolution nil)
    (contains_lemma formula-decl nil sortedlist nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (member def-decl "bool" list_props nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   336 250 t shostak))
 (delete_pivot_TCC1 0
  (delete_pivot_TCC1-1 nil 3482675376 3483218158
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (member def-decl "bool" list_props nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   53 50 t nil))
 (delete_pivot_TCC2 0
  (delete_pivot_TCC2-1 nil 3482675376 3483219008
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (split 2)
        (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (member def-decl "bool" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   669859 20 t nil))
 (exist_pivot?_TCC1 0
  (exist_pivot?_TCC1-1 nil 3482760987 3483218158
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) unchecked
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted? def-decl "bool" sortedlist nil)
    (member def-decl "bool" list_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil))
   216 190 t nil))
 (exist_pivot?_TCC2 0
  (exist_pivot?_TCC2-1 nil 3482760987 3483218158
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (sorted? def-decl "bool" sortedlist nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil))
   90 70 nil nil))
 (exist_lemma 0
  (exist_lemma-1 nil 3482764467 3483208281
   ("" (induct ck)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem-typepred)
      (("3" (flatten)
        (("3" (skolem-typepred)
          (("3" (split 2)
            (("1" (flatten)
              (("1" (hide -2 -5)
                (("1" (expand exist_pivot? -1)
                  (("1" (split -1)
                    (("1" (inst 1 cons1_var!1) (("1" (grind) nil nil))
                      nil)
                     ("2" (lemma cons_tr_clause)
                      (("2" (inst -1 "cons(cons1_var!1, cons2_var!1)")
                        (("2" (assert)
                          (("2" (inst -5 cl!1)
                            (("2" (assert)
                              (("2"
                                (skolem-typepred)
                                (("2"
                                  (inst 1 k!1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1 -4)
              (("2" (lemma cons_tr_clause)
                (("2" (inst -1 "cons(cons1_var!1, cons2_var!1)")
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (skolem-typepred)
                        (("2" (flatten)
                          (("2" (expand member -3)
                            (("2" (split -3)
                              (("1"
                                (expand exist_pivot? 2)
                                (("1"
                                  (flatten)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (expand exist_pivot? 2)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (inst -7 cl!1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst 5 k!1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (cons_tr_clause formula-decl nil trace_resolution nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (member def-decl "bool" list_props nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   234 170 t shostak))
 (find_pivot_TCC1 0
  (find_pivot_TCC1-1 nil 3482760023 3483218159
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (exist_pivot? def-decl "bool" trace_resolution nil))
   42 20 nil nil))
 (find_pivot_TCC2 0
  (find_pivot_TCC2-1 nil 3482760023 3483218159
   ("" (skolem-typepred)
    (("" (hide -1 -4)
      (("" (flatten)
        (("" (split) (("1" (grind) nil nil) ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (member def-decl "bool" list_props nil)
    (sorted? def-decl "bool" sortedlist nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   73 70 t nil))
 (find_pivot_TCC3 0
  (find_pivot_TCC3-1 nil 3482760023 3483218159
   ("" (skolem-typepred)
    (("" (hide -1 -4 -10)
      (("" (flatten)
        (("" (split)
          (("1" (assert) (("1" (grind) nil nil)) nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (member def-decl "bool" list_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   99 70 t nil))
 (find_pivot_TCC4 0
  (find_pivot_TCC4-1 nil 3482760023 3483218159
   ("" (skolem-typepred)
    (("" (hide -1 -4 -10)
      (("" (flatten)
        (("" (split) (("1" (grind) nil nil) ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (sorted? def-decl "bool" sortedlist nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (member def-decl "bool" list_props nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   262 240 t nil))
 (find_pivot_TCC5 0
  (find_pivot_TCC5-1 nil 3482760023 3483218159
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) unchecked
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted? def-decl "bool" sortedlist nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil))
   239 200 t nil))
 (find_pivot_TCC6 0
  (find_pivot_TCC6-1 nil 3482760023 3483218159
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (sorted? def-decl "bool" sortedlist nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (member def-decl "bool" list_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil))
   280 230 nil nil))
 (find_pivot_TCC7 0
  (find_pivot_TCC7-1 nil 3482760023 3483218160
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) unchecked
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted? def-decl "bool" sortedlist nil)
    (member def-decl "bool" list_props nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil))
   444 340 t nil))
 (find_pivot_TCC8 0
  (find_pivot_TCC8-1 nil 3482760987 3483280748
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (hide -1 -4 -9)
        (("" (split)
          (("1" (typepred "v!1(cdr[((tr_literal?))](nck!1), ncl!1)")
            (("1" (expand member + 1)
              (("1" (lift-if)
                (("1" (split 1)
                  (("1" (grind) nil nil) ("2" (flatten) nil nil)) nil))
                nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil))
            nil)
           ("2" (typepred "v!1(cdr[((tr_literal?))](nck!1), ncl!1)")
            (("1" (propax) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (sorted? def-decl "bool" sortedlist nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (member def-decl "bool" list_props nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   245050 1810 t nil))
 (merge_TCC1 0
  (merge_TCC1-1 nil 3482675376 3483208283
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) unchecked
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (member def-decl "bool" list_props nil)
    (sorted? def-decl "bool" sortedlist nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil))
   125 100 t nil))
 (merge_TCC2 0
  (merge_TCC2-1 nil 3482675376 3483208283
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) unchecked
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (member def-decl "bool" list_props nil)
    (sorted? def-decl "bool" sortedlist nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil))
   188 140 t nil))
 (merge_TCC3 0
  (merge_TCC3-1 nil 3482675376 3483208283
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) unchecked
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted? def-decl "bool" sortedlist nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil))
   367 290 t nil))
 (merge_TCC4 0
  (merge_TCC4-1 nil 3482675376 3483208284
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) unchecked
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted? def-decl "bool" sortedlist nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil))
   359 310 t nil))
 (merge_TCC5 0
  (merge_TCC5-1 nil 3482675376 3483207962
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted? def-decl "bool" sortedlist nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   202 160 nil nil))
 (merge_TCC6 0
  (merge_TCC6-1 nil 3482675376 3483281073
   ("" (skosimp)
    (("" (skolem-typepred)
      (("" (flatten)
        (("" (hide -2)
          (("" (split)
            (("1" (typepred "v!1(ckk!1, cll!1)")
              (("1" (hide -1)
                (("1" (typepred ck!1)
                  (("1" (hide -1)
                    (("1" (expand tr_clause? -1)
                      (("1" (expand tr_clause? 1)
                        (("1" (expand sorted?)
                          (("1" (lift-if -1)
                            (("1" (split -1)
                              (("1" (grind) nil nil)
                               ("2"
                                (flatten)
                                (("2" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (postpone) nil nil) ("3" (postpone) nil nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (sorted? def-decl "bool" sortedlist nil)
    (sorted_prop formula-decl nil sortedlist nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (sorted_clause formula-decl nil sortedlist nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tr_clause_prop formula-decl nil trace_resolution nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   109326 290 t nil))
 (merge_TCC7 0
  (merge_TCC7-1 nil 3482675376 3483208292
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) unchecked
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted? def-decl "bool" sortedlist nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil))
   738 630 t nil))
 (merge_TCC8 0
  (merge_TCC8-1 nil 3482675376 3483207970
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (sorted? def-decl "bool" sortedlist nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   237 180 nil nil))
 (merge_TCC9 0
  (merge_TCC9-1 nil 3482675376 3483208295
   ("" (skolem-typepred)
    (("" (hide -1 -3 -7)
      (("" (flatten)
        (("" (skolem-typepred)
          (("" (flatten)
            (("" (hide -2)
              (("" (split 4)
                (("1" (lemma tr_clause_prop)
                  (("1"
                    (inst -1
                     "cons[((tr_literal?))](k!1, v!1(ckk!1, cl!1))")
                    (("1" (flatten)
                      (("1" (delete -1)
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (typepred "v!1(ckk!1, cl!1)")
                              (("1"
                                (hide -1)
                                (("1"
                                  (inst -2 "car(v!1(ckk!1, cl!1))")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand member -2 1)
                                      (("1"
                                        (split -2)
                                        (("1"
                                          (lemma sorted_clause)
                                          (("1"
                                            (inst
                                             -1
                                             "car(v!1(ckk!1, cl!1))"
                                             "ck!1")
                                            (("1"
                                              (replace -8 -1)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (expand tr_clause? -4)
                                              (("2" (propax) nil nil))
                                              nil)
                                             ("3"
                                              (lemma tr_clause_prop)
                                              (("3"
                                                (inst -1 ck!1)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma sorted_clause)
                                          (("2"
                                            (inst
                                             -1
                                             "car(v!1(ckk!1, cl!1))"
                                             "cl!1")
                                            (("1"
                                              (replace -10 -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand member -1)
                                                  (("1"
                                                    (replace -9 -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3"
                                              (lemma tr_clause_prop)
                                              (("3"
                                                (inst -1 ck!1)
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma tr_clause_prop)
                                    (("2"
                                      (inst -1 ck!1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma tr_clause_prop)
                                (("2"
                                  (inst -1 ck!1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma tr_clause_prop)
                      (("2" (inst -1 ck!1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skolem-typepred)
                  (("2" (split 1)
                    (("1" (flatten)
                      (("1" (expand member -1)
                        (("1" (split -1)
                          (("1" (grind) nil nil)
                           ("2" (typepred "v!1(ckk!1, cl!1)")
                            (("1" (hide -1)
                              (("1"
                                (inst -2 k!2)
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma tr_clause_prop)
                              (("2"
                                (inst -1 ck!1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split -1)
                        (("1" (replace -7 -1)
                          (("1" (expand member -1)
                            (("1" (split -1)
                              (("1" (grind) nil nil)
                               ("2"
                                (typepred "v!1(ckk!1, cl!1)")
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (inst -2 k!2)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma tr_clause_prop)
                                  (("2"
                                    (inst -1 ck!1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "v!1(ckk!1, cl!1)")
                          (("1" (hide -1)
                            (("1" (inst -2 k!2)
                              (("1"
                                (flatten)
                                (("1"
                                  (delete -2)
                                  (("1"
                                    (expand member 1)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma tr_clause_prop)
                            (("2" (inst -1 ck!1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((tr_clause_prop formula-decl nil trace_resolution nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (sorted_clause formula-decl nil sortedlist nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (sorted? def-decl "bool" sortedlist nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   2439 2010 t nil))
 (merge_TCC10 0
  (merge_TCC10-1 nil 3482675376 3483208295
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) unchecked
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted? def-decl "bool" sortedlist nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil))
   712 600 t nil))
 (merge_TCC11 0
  (merge_TCC11-1 nil 3482675376 3483207974
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (sorted? def-decl "bool" sortedlist nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   238 190 nil nil))
 (merge_TCC12 0
  (merge_TCC12-1 nil 3482675376 3483208297
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (hide -2 -3 -5 -8)
            (("" (lemma tr_clause_prop)
              (("" (inst-cp -1 ck!1)
                (("" (inst -1 cl!1)
                  (("" (assert)
                    (("" (replace -7 -2)
                      (("" (replace -8 -1)
                        (("" (assert)
                          (("" (case "tr_clause?(cll!1)")
                            (("1" (case "tr_clause?(ckk!1)")
                              (("1"
                                (split 5)
                                (("1"
                                  (lemma tr_clause_prop)
                                  (("1"
                                    (inst
                                     -1
                                     "cons[((tr_literal?))](l!1, v!1(ck!1, cll!1))")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (delete -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (typepred
                                               "v!1(ck!1, cll!1)")
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (lemma sorted_clause)
                                                  (("1"
                                                    (inst
                                                     -3
                                                     "car(v!1(ck!1, cll!1))")
                                                    (("1"
                                                      (expand
                                                       member
                                                       -3
                                                       1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -3)
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "car(v!1(ck!1, cll!1))"
                                                             "ck!1")
                                                            (("1"
                                                              (replace
                                                               -12
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -11
                                                                   1
                                                                   RL)
                                                                  (("1"
                                                                    (expand
                                                                     member
                                                                     -1)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -11
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -11
                                                                             -1
                                                                             RL)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               3)
                                                                              (("1"
                                                                                (lemma
                                                                                 index_inj)
                                                                                (("1"
                                                                                  (expand
                                                                                   injective?)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     k!1
                                                                                     l!1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -11
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               tr_clause?
                                                               -8)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             -2
                                                             "car(v!1(ck!1, cll!1))"
                                                             "cl!1")
                                                            (("1"
                                                              (replace
                                                               -13
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               tr_clause?
                                                               -9)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skolem-typepred)
                                  (("2"
                                    (split 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand member -1)
                                        (("1"
                                          (split -1)
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (typepred
                                             "v!1(ck!1, cll!1)")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (inst -2 k!2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand member 2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replace -14 3)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (typepred "v!1(ck!1, cll!1)")
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (inst -2 k!2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand member 1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (expand member 1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (replace -12 -1)
                                              (("2"
                                                (expand member -1)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (typepred
                                                     "v!1(ck!1, cll!1)")
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (inst -2 k!2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((tr_clause_prop formula-decl nil trace_resolution nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (sorted_clause formula-decl nil sortedlist nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (injective? const-decl "bool" functions nil)
    (index_inj formula-decl nil trace_resolution nil)
    (sorted? def-decl "bool" sortedlist nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1240 1010 t nil))
 (merge_includes1_TCC1 0
  (merge_includes1_TCC1-1 nil 3482760023 3483208297
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil))
   35 20 nil nil))
 (merge_includes1_TCC2 0
  (merge_includes1_TCC2-1 nil 3482760023 3483208297
   ("" (skolem-typepred)
    (("" (typepred "merge(ck!1, cl!1)")
      (("" (expand tr_clause? -2) (("" (propax) nil nil)) nil)) nil))
    nil)
   unchecked
   ((merge def-decl "{cla: (tr_clause?) |
         FORALL k: member(k, cla) IFF (member(k, ck) OR member(k, cl))}"
           trace_resolution nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   8 10 t nil))
 (merge_includes1_TCC3 0
  (merge_includes1_TCC3-1 nil 3482760023 3483208297
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil))
   41 20 nil nil))
 (merge_includes1 0
  (merge_includes1-1 nil 3483146677 3483208297
   ("" (skolem-typepred)
    (("" (hide -1 -3)
      (("" (use every_member_subset (k ck!1 l "merge(ck!1, cl!1)"))
        (("" (use every_member_subset (k cl!1 l "merge(ck!1, cl!1)"))
          (("" (lemma subset_include)
            (("" (inst-cp -1 ck!1 "merge(ck!1, cl!1)")
              (("1" (inst -1 cl!1 "merge(ck!1, cl!1)")
                (("1" (replace -1 1)
                  (("1" (replace -2 1)
                    (("1" (replace -3 1)
                      (("1" (replace -4 1)
                        (("1" (hide -1 -2 -3 -4)
                          (("1" (typepred "merge(ck!1, cl!1)")
                            (("1" (hide -1)
                              (("1"
                                (split 1)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (inst -3 a!1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp)
                                  (("2"
                                    (inst -3 a!1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand tr_clause? -5) (("2" (propax) nil nil))
                  nil))
                nil)
               ("2" (typepred "merge(ck!1, cl!1)")
                (("2" (expand tr_clause? -2) (("2" (propax) nil nil))
                  nil))
                nil)
               ("3" (expand tr_clause? -3) (("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((sorted? def-decl "bool" sortedlist nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (subset_include formula-decl nil sortedlist nil)
    (merge def-decl "{cla: (tr_clause?) |
         FORALL k: member(k, cla) IFF (member(k, ck) OR member(k, cl))}"
           trace_resolution nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (every_member_subset formula-decl nil minlist nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   106 50 t shostak))
 (resolution_TCC1 0
  (resolution_TCC1-1 nil 3482764464 3483208297
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              (("" (hide -4 -7 -10)
                (("" (split 4)
                  (("1" (inst -5 pivot!1) (("1" (assert) nil nil)) nil)
                   ("2" (inst -5 "-pivot!1")
                    (("1" (use member_tr_lit_member_nzint)
                      (("1" (replace -1 1)
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (lemma member_tr_lit_member_nzint)
                              (("1"
                                (inst -1 "-pivot!1" "ncl!1")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (delete -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 2 3 4 5)
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (member_tr_lit_member_nzint formula-decl nil trace_resolution nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   150 100 t nil))
 (resolution_lemma_TCC1 0
  (resolution_lemma_TCC1-1 nil 3482776948 3483208297
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil))
   78 50 nil nil))
 (resolution_lemma_TCC2 0
  (resolution_lemma_TCC2-1 nil 3482776948 3483208297
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil))
   75 60 nil nil))
 (resolution_lemma 0
  (resolution_lemma-1 nil 3482783534 3483208298
   ("" (skosimp)
    (("" (assert)
      (("" (split)
        (("1" (flatten)
          (("1" (split)
            (("1" (skosimp)
              (("1" (expand resolution)
                (("1" (expand not_true_clauses)
                  (("1" (flatten)
                    (("1" (replace 3 1)
                      (("1" (replace 4 1)
                        (("1" (replace -2 1)
                          (("1"
                            (typepred
                             "delete_pivot(merge(nck!1, ncl!1), find_pivot(nck!1, ncl!1))")
                            (("1" (hide -1)
                              (("1"
                                (inst -2 "k!1")
                                (("1"
                                  (typepred "merge(nck!1, ncl!1)")
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (inst -2 "k!1")
                                      (("1"
                                        (replace -5 -2)
                                        (("1"
                                          (replace -2 -4)
                                          (("1"
                                            (expand tr_clause_true? +)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (split)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (split)
                                                        (("1"
                                                          (typepred
                                                           ncl!1)
                                                          (("1"
                                                            (expand
                                                             ne_tr_clause?
                                                             -3)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide 4 8)
                                                            (("2"
                                                              (typepred
                                                               "find_pivot(nck!1, ncl!1)")
                                                              (("2"
                                                                (replace
                                                                 -5
                                                                 -4
                                                                 RL)
                                                                (("2"
                                                                  (case
                                                                   "-k!1 = find_pivot(nck!1, ncl!1)")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     -4
                                                                     RL)
                                                                    (("1"
                                                                      (lemma
                                                                       clause_true_lemma)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "nck!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             tr_clause_true?
                                                                             -1)
                                                                            (("1"
                                                                              (inst
                                                                               1
                                                                               "k!1")
                                                                              (("1"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   member_tr_lit_member_nzint)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "-k!1"
                                                                                     "nck!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (expand resolution)
                (("2" (expand not_true_clauses)
                  (("2" (flatten)
                    (("2" (replace 4 1)
                      (("2" (replace 3 1)
                        (("2" (replace -2 1)
                          (("2"
                            (typepred
                             "delete_pivot(merge(nck!1, ncl!1), find_pivot(nck!1, ncl!1))")
                            (("2" (hide -1)
                              (("2"
                                (inst -2 "l!1")
                                (("2"
                                  (replace -2 1)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (typepred
                                         "merge(nck!1, ncl!1)")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst -2 "l!1")
                                            (("1"
                                              (replace -2 1)
                                              (("1"
                                                (replace -6 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred
                                         "find_pivot(nck!1, ncl!1)")
                                        (("2"
                                          (replace -5 -3 RL)
                                          (("2"
                                            (case
                                             "-l!1 = -find_pivot(nck!1, ncl!1)")
                                            (("1"
                                              (replace -1 -5 RL)
                                              (("1"
                                                (expand
                                                 tr_clause_true?
                                                 3)
                                                (("1"
                                                  (lift-if 3)
                                                  (("1"
                                                    (split 3)
                                                    (("1"
                                                      (expand
                                                       member
                                                       -11)
                                                      (("1"
                                                        (lift-if -11)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           -11)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (lemma
                                                         clause_true_lemma)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "ncl!1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               tr_clause_true?
                                                               -1)
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "l!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (split)
            (("1" (expand resolution)
              (("1" (expand not_true_clauses)
                (("1" (flatten)
                  (("1" (replace 3 1)
                    (("1" (replace 4 1)
                      (("1" (replace 2 1)
                        (("1" (lemma merge_includes1)
                          (("1" (inst -1 "nck!1" "ncl!1")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand resolution)
              (("2" (expand not_true_clauses)
                (("2" (flatten)
                  (("2" (replace 2 1)
                    (("2" (replace 4 1)
                      (("2" (replace 3 1)
                        (("2" (lemma merge_includes1)
                          (("2" (inst -1 "nck!1" "ncl!1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((merge_includes1 formula-decl nil trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (clause_true_lemma formula-decl nil trace_resolution nil)
    (member_tr_lit_member_nzint formula-decl nil trace_resolution nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sorted? def-decl "bool" sortedlist nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (remove def-decl "{sBB |
         FORALL f:
           member(f, sBB) <=> (NOT key(f) = key(e)) AND member(f, sAA)}"
      sortedlist nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (member def-decl "bool" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (delete_pivot const-decl "{cl |
         FORALL l:
           member(l, cl) <=>
            member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (merge def-decl "{cla: (tr_clause?) |
         FORALL k: member(k, cla) IFF (member(k, ck) OR member(k, cl))}"
           trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (find_pivot def-decl
     "{k | member(k, nck) AND member(tr_neg(k), ncl)}" trace_resolution
     nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil))
   637 490 t shostak))
 (include_res 0
  (include_res-1 nil 3482776952 3483217649
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (assert)
        (("" (flatten)
          (("" (use resolution_lemma)
            (("" (assert)
              (("" (flatten)
                (("" (split 1)
                  (("1"
                    (lemma every_member_subset
                     (k nck!1 l
                      "cons(find_pivot(nck!1, ncl!1), resolution(nck!1, ncl!1))"))
                    (("1" (assert)
                      (("1" (skolem-typepred)
                        (("1" (flatten)
                          (("1" (inst -3 a!1)
                            (("1" (assert)
                              (("1"
                                (split -3)
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (use subset_numpred_nzint)
                    (("2" (replace -1)
                      (("2"
                        (use every_member_subset
                             (k ncl!1 l
                              "cons(-find_pivot(nck!1, ncl!1), resolution(nck!1, ncl!1))"))
                        (("2" (assert)
                          (("2" (skolem-typepred)
                            (("2" (flatten)
                              (("2"
                                (expand member 2)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (delete -3)
                                    (("2"
                                      (inst -3 a!1)
                                      (("1"
                                        (case
                                         "list_props[(tr_literal?)].member(a!1, ncl!1)")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (split -4)
                                            (("1"
                                              (lemma
                                               member_tr_lit_member_nzint)
                                              (("1"
                                                (inst
                                                 -1
                                                 a!1
                                                 "resolution(nck!1, ncl!1)")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred a!1)
                                          (("2"
                                            (typepred a!1)
                                            (("2"
                                              (case "tr_literal?(a!1)")
                                              (("1"
                                                (use
                                                 member_tr_lit_member_nzint)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (postpone) nil nil))
                                        nil)
                                       ("2"
                                        (hide
                                         2
                                         3
                                         4
                                         5
                                         -2
                                         -3
                                         -4
                                         -5
                                         -6
                                         -8
                                         -9
                                         -10)
                                        (("2"
                                          (typepred a!1)
                                          (("2"
                                            (expand tr_clause?)
                                            (("2"
                                              (typepred ncl!1)
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (hide -2)
                                                  (("2"
                                                    (case
                                                     "FORALL(a : number, l: list[(tr_literal?)]): member[nzint](a, l) => tr_literal?(a)")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       a!1
                                                       ncl!1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide - 2)
                                                      (("2"
                                                        (induct l)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (skolem-typepred)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (skolem-typepred)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   member
                                                                   -4)
                                                                  (("2"
                                                                    (split
                                                                     -4)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -4
                                                                       a!2)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide 2)
                                                          (("3"
                                                            (induct l)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (skolem-typepred)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (skolem-typepred)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       member
                                                                       -4)
                                                                      (("2"
                                                                        (split
                                                                         -4)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           -4
                                                                           a!2)
                                                                          (("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (postpone)
                                                      nil
                                                      nil)
                                                     ("4"
                                                      (grind)
                                                      (("1"
                                                        (postpone)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (postpone)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (postpone)
                                                        nil
                                                        nil)
                                                       ("4"
                                                        (postpone)
                                                        nil
                                                        nil)
                                                       ("5"
                                                        (postpone)
                                                        nil
                                                        nil)
                                                       ("6"
                                                        (postpone)
                                                        nil
                                                        nil)
                                                       ("7"
                                                        (postpone)
                                                        nil
                                                        nil)
                                                       ("8"
                                                        (postpone)
                                                        nil
                                                        nil)
                                                       ("9"
                                                        (postpone)
                                                        nil
                                                        nil)
                                                       ("10"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 8949309 1030 t shostak))
 (resolution_list_TCC1 0
  (resolution_list_TCC1-1 nil 3482675376 3483207976
   ("" (grind) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (delete_pivot const-decl "{cl |
         FORALL l:
           member(l, cl) <=>
            member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (length def-decl "nat" list_props nil))
   198 160 t nil))
 (resolution_list_TCC2 0
  (resolution_list_TCC2-1 nil 3482776948 3483208298
   ("" (grind) nil nil) unchecked
   ((ne_tr_clause? const-decl "bool" trace_resolution nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sorted? def-decl "bool" sortedlist nil)
    (tr_clause? const-decl "bool" trace_resolution nil))
   15 10 t nil))
 (build_chain_list_TCC1 0
  (build_chain_list_TCC1-1 nil 3482675376 3483207976
   ("" (subtype-tcc) nil nil) unchecked nil 9 10 nil nil))
 (build_chain_list_TCC2 0
  (build_chain_list_TCC2-1 nil 3482675376 3483208298
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) unchecked
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "nat" trace_resolution nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (chain type-eq-decl nil trace_resolution nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (clause_chain type-eq-decl nil trace_resolution nil)
    (certificate type-eq-decl nil trace_resolution nil))
   79 70 t nil))
 (resolve_rec_TCC1 0
  (resolve_rec_TCC1-1 nil 3482675376 3483207976
   ("" (subtype-tcc) nil nil) unchecked
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)) 8
   0 nil nil))
 (resolve_rec_TCC2 0
  (resolve_rec_TCC2-1 nil 3482675376 3483207976
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "nat" trace_resolution nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   25 20 nil nil))
 (resolve_rec_TCC3 0
  (resolve_rec_TCC3-1 nil 3482675376 3483207976
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "nat" trace_resolution nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   73 50 nil nil))
 (resolve_rec_TCC4 0
  (resolve_rec_TCC4-1 nil 3482675376 3483207976
   ("" (termination-tcc) nil nil) unchecked
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   15 20 nil nil))
 (resolve_rec_TCC5 0
  (resolve_rec_TCC5-1 nil 3482675376 3483208298
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "nat" trace_resolution nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   64 60 nil nil))
 (resolve_rec_TCC6 0
  (resolve_rec_TCC6-1 nil 3482675376 3483208299
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "nat" trace_resolution nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   41 20 nil nil))
 (resolve_rec_TCC7 0
  (resolve_rec_TCC7-1 nil 3482675376 3483208299
   ("" (termination-tcc) nil nil) unchecked
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   15 10 nil nil))
 (resolve_TCC1 0
  (resolve_TCC1-1 nil 3482107568 3483207976 ("" (subtype-tcc) nil nil)
   unchecked
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   3 10 nil nil))
 (null_resolution?_TCC1 0
  (null_resolution?_TCC1-1 nil 3483280417 3483281431
   ("" (subtype-tcc) nil nil) unchecked
   ((minus_odd_is_odd application-judgement "odd_int" integers nil))
   106 40 t nil))
 (null_resolution?_TCC2 0
  (null_resolution?_TCC2-1 nil 3483280417 3483282296
   ("" (subtype-tcc) nil nil) unchecked
   ((/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "nat" trace_resolution nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   276 200 t nil))
 (null_resolution?_TCC3 0
  (null_resolution?_TCC3-1 nil 3483280417 3483282302
   ("" (termination-tcc) nil nil) unchecked
   ((/= const-decl "boolean" notequal nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   216 60 t nil))
 (exist_null_TCC1 0
  (exist_null_TCC1-1 nil 3483283532 nil ("" (subtype-tcc) nil nil) nil
   nil nil nil nil nil))
 (exist_null 0
  (exist_null-1 nil 3483282806 3483283579
   ("" (skosimp)
    (("" (expand null_resolution?) (("" (postpone) nil nil)) nil)) nil)
   unfinished nil 40482 60 t shostak)))

