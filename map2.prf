(map2
 (map2_TCC1 0
  (map2_TCC1-1 nil 3475777075 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (reduce2_TCC1 0
  (reduce2_TCC1-1 nil 3475777075 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (delete_reduce 0
  (delete_reduce-1 nil 3475777076
   ("" (induct-and-simplify "kk" :rewrites "delete_append") nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil map2 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (delete def-decl
            "{l1 | (FORALL c: member(c, l1) = (c /= a AND member(c, l)))}"
      minlist nil)
    (reduce adt-def-decl "[list[T] -> range]" list_adt_reduce nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (S1 formal-type-decl nil map2 nil)
    (list_induction formula-decl nil list_adt nil)
    (delete_append formula-decl nil minlist nil))
   shostak))
 (every_reduce 0
  (every_reduce-1 nil 3475777753
   ("" (induct-and-simplify "kk") nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil map2 nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (reduce adt-def-decl "[list[T] -> range]" list_adt_reduce nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (S1 formal-type-decl nil map2 nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (reduce_map 0
  (reduce_map-1 nil 3475803898 ("" (induct-and-simplify "kk") nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil map2 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (reduce adt-def-decl "[list[T] -> range]" list_adt_reduce nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (S1 formal-type-decl nil map2 nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (every_forall 0
  (every_forall-1 nil 3476076795
   ("" (induct-and-simplify "ll") nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil map2 nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (S1 formal-type-decl nil map2 nil)
    (list_induction formula-decl nil list_adt nil))
   shostak)))

