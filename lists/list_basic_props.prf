(list_basic_props
 (length_cons 0
  (length_cons-1 nil 3579358786 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)) shostak))
 (length_cdr 0
  (length_cdr-1 nil 3579358794 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (every_forall 0
  (every_forall-1 nil 3579359705
   ("" (induct-and-simplify l :if-match all)
    (("1" (typepred "x!1") (("1" (grind) nil nil)) nil)
     ("2" (typepred "x!1") (("2" (grind) nil nil)) nil)
     ("3" (typepred "x!1")
      (("3" (reveal -1)
        (("3" (grind) (("3" (inst -1 "x!1") nil nil)) nil)) nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (x!1 skolem-const-decl
     "{x | member(x, cons(cons1_var!1, cons2_var!1))}" list_basic_props
     nil)
    (cons1_var!1 skolem-const-decl "T" list_basic_props nil)
    (cons2_var!1 skolem-const-decl "list[T]" list_basic_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (T formal-type-decl nil list_basic_props nil)
    (list_induction formula-decl nil list_adt nil)
    (member def-decl "bool" list_props nil))
   shostak))
 (some_exists 0
  (some_exists-1 nil 3577636393
   ("" (induct-and-simplify l :if-match all)
    (("1" (typepred "x!1") (("1" (grind) nil nil)) nil)
     ("2" (typepred "x!1") (("2" (grind) nil nil)) nil)
     ("3" (typepred "x!1")
      (("3" (reveal -1)
        (("3" (grind) (("3" (inst 1 "x!1") nil nil)) nil)) nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (x!1 skolem-const-decl
     "{x | member(x, cons(cons1_var!1, cons2_var!1))}" list_basic_props
     nil)
    (cons1_var!1 skolem-const-decl "T" list_basic_props nil)
    (cons2_var!1 skolem-const-decl "list[T]" list_basic_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (some adt-def-decl "boolean" list_adt nil)
    (T formal-type-decl nil list_basic_props nil)
    (list_induction formula-decl nil list_adt nil)
    (member def-decl "bool" list_props nil))
   shostak))
 (append_cons 0
  (append_cons-1 nil 3578247842 ("" (grind) nil nil)
   ((append def-decl "list[T]" list_props nil)) shostak))
 (reverse_null 0
  (reverse_null-1 nil 3578247847 ("" (grind) nil nil)
   ((reverse def-decl "list[T]" list_props nil)) shostak))
 (reverse_cons 0
  (reverse_cons-1 nil 3578247853 ("" (grind) nil nil)
   ((reverse def-decl "list[T]" list_props nil)) shostak))
 (nth_cons_TCC1 0
  (nth_cons_TCC1-1 nil 3578205543 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)) nil))
 (nth_cons_TCC2 0
  (nth_cons_TCC2-1 nil 3578207351 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-type-decl nil list_basic_props nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (nth_cons 0
  (nth_cons-1 nil 3578207426 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-type-decl nil list_basic_props nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (nth_cdr_TCC1 0
  (nth_cdr_TCC1-1 nil 3578682766
   ("" (grind :exclude length :rewrites length_cdr) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-type-decl nil list_basic_props nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length_cdr formula-decl nil list_basic_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (nth_cdr_TCC2 0
  (nth_cdr_TCC2-1 nil 3578682766 ("" (grind) nil nil) nil nil))
 (nth_cdr 0
  (nth_cdr-1 nil 3578682769 ("" (grind) nil nil)
   ((nth def-decl "T" list_props nil)) shostak))
 (nth_append_TCC1 0
  (nth_append_TCC1-1 nil 3578205073
   ("" (grind :rewrites length_append) nil nil)
   ((length_append formula-decl nil list_props nil)) nil))
 (nth_append_TCC2 0
  (nth_append_TCC2-1 nil 3578205073 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-type-decl nil list_basic_props nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (nth_append 0
  (nth_append-1 nil 3578205107
   (""
    (induct-and-simplify l :rewrites
     (nth_cons length_append append_null) :if-match nil)
    (("1" (rewrite nth_cons) (("1" (grind) nil nil)) nil)
     ("2" (typepred "i!1") (("2" (grind) nil nil)) nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth_cons formula-decl nil list_basic_props nil)
    (cons1_var!1 skolem-const-decl "T" list_basic_props nil)
    (cons2_var!1 skolem-const-decl "list[T]" list_basic_props nil)
    (m!1 skolem-const-decl "list[T]" list_basic_props nil)
    (i!1 skolem-const-decl
     "below(length(cons(cons1_var!1, cons2_var!1)) + length(m!1))"
     list_basic_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (length_append formula-decl nil list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (T formal-type-decl nil list_basic_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (nth_reverse_TCC1 0
  (nth_reverse_TCC1-1 nil 3578162653
   ("" (grind :rewrites length_reverse) nil nil)
   ((length_reverse formula-decl nil list_props nil)) nil))
 (nth_reverse_TCC2 0
  (nth_reverse_TCC2-1 nil 3578205073 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (nth_reverse 0
  (nth_reverse-1 nil 3578204771
   (""
    (induct-and-simplify l :rewrites
     (nth_append length_reverse nth_append nth_cons) :exclude nth
     :if-match nil)
    (("1" (typepred "i!1") (("1" (grind) nil nil)) nil)
     ("2" (typepred "i!1")
      (("2" (rewrite nth_append) (("2" (grind) nil nil)) nil)) nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nth_cons formula-decl nil list_basic_props nil)
    (i!1 skolem-const-decl
     "below(length(cons(cons1_var!1, cons2_var!1)))" list_basic_props
     nil)
    (cons2_var!1 skolem-const-decl "list[T]" list_basic_props nil)
    (cons1_var!1 skolem-const-decl "T" list_basic_props nil)
    (nth_append formula-decl nil list_basic_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_reverse formula-decl nil list_props nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-type-decl nil list_basic_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (nth_equal_TCC1 0
  (nth_equal_TCC1-1 nil 3578326794 ("" (subtype-tcc) nil nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_basic_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (nth_equal 0
  (nth_equal-1 nil 3578326797
   ("" (induct-and-simplify l1 :if-match nil)
    (("1" (inst -1 "cdr(l2!1)")
      (("1" (prop)
        (("1" (decompose-equality 1)
          (("1" (inst -5 0) (("1" (grind) nil nil)) nil)) nil)
         ("2" (expand length -1 2) (("2" (grind) nil nil)) nil)
         ("3" (skeep)
          (("3" (inst -2 "i+1") (("3" (grind) nil nil)) nil)) nil))
        nil)
       ("2" (grind) nil nil))
      nil)
     ("2" (grind) (("2" (decompose-equality -1) nil nil)) nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (l2!1 skolem-const-decl "list[T]" list_basic_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (T formal-type-decl nil list_basic_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (member_append 0
  (member_append-1 nil 3577636826 ("" (induct-and-simplify l) nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil list_basic_props nil)
    (list_induction formula-decl nil list_adt nil))
   nil))
 (member_reverse 0
  (member_reverse-1 nil 3577637967
   ("" (induct-and-simplify l :rewrites member_append) nil nil)
   ((member_append formula-decl nil list_basic_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_basic_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (member_nth 0
  (member_nth-1 nil 3577637302
   ("" (induct-and-simplify l :if-match nil)
    (("1" (typepred "i!1") (("1" (grind) nil nil)) nil)
     ("2" (inst 1 0) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
     ("3" (inst -1 "x!1")
      (("3" (prop)
        (("3" (skeep)
          (("3" (inst 1 "i + 1") (("3" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("4" (rewrite nth_cons)
      (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
    nil)
   ((nth_cons formula-decl nil list_basic_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons1_var!1 skolem-const-decl "T" list_basic_props nil)
    (i!1 skolem-const-decl
     "below(length(cons(cons1_var!1, cons2_var!1)))" list_basic_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons2_var!1 skolem-const-decl "list[T]" list_basic_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (T formal-type-decl nil list_basic_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak)))
