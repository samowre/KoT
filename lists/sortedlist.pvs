sortedlist   [ T: TYPE, <=:(total_order?[T])]
		: THEORY
  BEGIN
  IMPORTING before_list[T,<=]

  l, m, l1, l2 : VAR list[T]
  a,b,c: VAR T
  x,y,z: VAR T
  p: VAR PRED[T]
  i: VAR nat

 


% A list is sorted if the elements are ordered according to <, 
% and contains no duplicate.
  sorted_aux?(l, (<:(strict_total_order?[T]))): RECURSIVE bool =
      CASES l OF
        null: TRUE,
     	cons(h, lt): 
	  CASES lt OF
	    null: TRUE,
	    cons(th, ltt): h < th AND sorted_aux?(lt,<)
	  ENDCASES
      ENDCASES
     MEASURE length(l)
  
  nth_sorted_aux: RECURSIVE JUDGEMENT sorted_aux?(l,(<:(strict_total_order?[T]))) HAS_TYPE   
  		  { b:bool | b IFF FORALL (i,j:below(length(l))): i < j IMPLIES nth(l,i) < nth(l,j)}

  sorted?(l): bool = sorted_aux?(l,<)
  rev_sorted?(l): bool = sorted_aux?(l,LAMBDA x,y: y < x)  

  sl, sl1, sl2 : VAR (sorted?)

  % Powerful characterisation of sorted list with nth

  nth_sorted: LEMMA FORALL l: sorted?(l) IFF 
  	      	    FORALL (i,j:below(length(l))): i < j IFF nth(l,i) < nth(l,j)
  nth_revsorted: LEMMA FORALL l: rev_sorted?(l) IFF 
  	      	    FORALL (i,j:below(length(l))): i < j IFF nth(l,j) < nth(l,i)

  % Interaction between rev_sorted and sorted
  rev_sorted: THEOREM rev_sorted?(l) IFF sorted?(reverse(l))

  % Usefull properties
  cdr_sorted: LEMMA cons?(sl) IMPLIES sorted?(cdr(sl))
  car_sorted:  LEMMA cons?(sl) AND member(a, cdr(sl)) IMPLIES car(sl) < a
  
  % Min and max of a sorted list
  min_sorted: LEMMA cons?(sl) IMPLIES min(sl) = car(sl)
  max_sorted: LEMMA cons?(sl) IMPLIES max(sl) = car(reverse(sl)) ;

  % Optimized version of comon functions
  % More efficient version of member in the case of a sorted list
  s_member(a, sl): RECURSIVE bool = 
    CASES sl OF
      null: FALSE,
      cons(h, slt): IF    a<h THEN FALSE
      	      	    ELSIF a=h THEN TRUE
		    ELSE s_member(a, slt)
		    ENDIF
    ENDCASES
  MEASURE length(sl)
  % More efficient version of remove in the case of a sorted list  
  s_remove(a,sl): RECURSIVE { s:(sorted?)  | FORALL x: member(x,s) IFF 
       	 	      	      NOT x = a AND member(x,sl)} = 
      CASES sl OF
        null : sl,
	cons(h, slt) : IF a=h THEN slt
		    ELSIF a<h THEN sl % a not in the list
		      	      ELSE cons(h, s_remove(a, slt))
		    ENDIF
      ENDCASES
      MEASURE length(sl)
  % /!\ Semantic of insert : if the element is already in, just return the list
  s_insert(a,sl): RECURSIVE { s:(sorted?) | FORALL x: member(x,s) IFF x = a OR member(x,sl) } =
	CASES sl OF
	null: cons(a,null),
  	cons(h,slt): IF a<h THEN cons(a,sl)
		  ELSIF a=h THEN sl
		    	    ELSE cons(h,s_insert(a,slt))
  		  ENDIF 
  	ENDCASES
  MEASURE length(sl)
  % More efficient version of subset
  s_subset?(sl1, sl2): RECURSIVE bool = 
    	 CASES sl1 OF
	   null: true,
	   cons(h1, t1): 
	     CASES sl2 OF
	       null: false,
	       cons(h2, t2): 
	         COND
		   h1 < h2 -> false, 
		   h1 = h2 -> s_subset?(t1, t2),
		   h2 < h1 -> s_subset?(sl1, t2)
		 ENDCOND
	     ENDCASES
   	 ENDCASES
    MEASURE length(sl2)
  % More efficient version of equal
  s_equal?(sl1,sl2): RECURSIVE bool = 
	CASES sl1 OF
	 null: null?(sl2),
	 cons(h1,t1): CASES sl2 OF
	 	      null: FALSE,
		      cons(h2,t2): h2=h1 AND s_equal?(t1,t2)
		      ENDCASES
        ENDCASES
	MEASURE length(sl2) ;
  % More efficient version of before on sorted lists
  <(sl1,sl2): bool =  cons?(sl2) AND 
  	      	        (null?(sl1) OR car(reverse(sl1)) < car(sl2))

  
  % Some properties of sorted lists
  % A sorted list contains no dupplicate
  sorted_uniques:  LEMMA uniques?(sl)
  % Two sorted list are equal IFF they are structurally equal
  s_equal_char: THEOREM s_equal?(sl1,sl2) IFF sl1 = sl2 
  % Filter is sorted: useful for s_remove_remove 
  filter_sorted: JUDGEMENT filter(sl,p) HAS_TYPE (sorted?)

  % Optimized versions are the same as regular versions
  s_member_member: LEMMA s_member(a, sl) IFF member(a, sl)
  s_subset_subset: LEMMA s_subset?(sl1, sl2) IFF subset?(sl1, sl2)
  s_equal_equal:   LEMMA  s_equal?(sl1,sl2)  IFF  equal?(sl1,sl2) ;
  s_remove_remove: LEMMA s_remove(a, sl) = remove(a,sl)
  s_before_before: THEOREM sl1 < sl2 IFF (<::PRED[[list[T],list[T]]])(sl1,sl2)

  
  % Comon list functions
  % Append
  append_sorted: LEMMA (sl1 < sl2 OR null?(sl2)) IFF sorted?(append(sl1,sl2))
  % insert_remove (sets)
  insert_remove:   LEMMA s_insert(a,s_remove(a,sl))=s_insert(a,sl)
  remove_insert:   LEMMA s_remove(a,s_insert(a,sl))=s_remove(a,sl)
  insert_no_change:LEMMA s_insert(a,sl)=sl IFF member(a,sl)
  remove_no_change:LEMMA s_remove(a,sl)=sl IFF NOT member(a,sl)




  % SORTS (and remove duplicates)
  % Insertion sort
  insert_sort(l): RECURSIVE { s:(sorted?) | FORALL x: member(x,s) IFF member(x,l) } = 
   	      CASES l OF
	      	  null: null,
		  cons(h,lt): s_insert(h,insert_sort(lt))
	      ENDCASES
  MEASURE length(l)
  
  % Merge sort 
    % merge and remove duplicates
  merge(sl1,sl2): RECURSIVE { l:(sorted?) | FORALL x: member(x,l) IFF 
  		  	      		    member(x,sl1) OR member(x,sl2)} =
    CASES sl1 OF
      null: sl2,
      cons(h1,t1): 
	CASES sl2 OF
 	  null: sl1,
	  cons(h2,t2):
 	    IF    h1 = h2  THEN cons(h1,merge(t1,t2))
	    ELSIF h1 <= h2 THEN cons(h1,merge(t1,sl2))
	    ELSE           	cons(h2,merge(sl1,t2))
	    ENDIF
	ENDCASES
    ENDCASES
  MEASURE length(sl1)+length(sl2)
    % Split in half
  split_half(l): MACRO [list[T],list[T]] = partition_pos(l,LAMBDA i,x: even?(i))
    % Merge sort
  merge_sort(l): RECURSIVE { s:(sorted?) | FORALL x: member(x,s) IFF member(x,l) } = 
    	CASES l OF
	null:null,
	cons(h,t): 
	    CASES t OF
	    null: cons(h,null),
	    cons(h2,t2): 
	    	LET (l1,l2) = split_half(l) IN
    		merge(merge_sort(l1),merge_sort(l2))
	ENDCASES ENDCASES
  MEASURE length(l)

  % Quick sort
  quick_sort(l): RECURSIVE { s:(sorted?) | FORALL x: member(x,s) IFF member(x,l) } = 
  	    CASES l OF
	    null: null,
	    cons(h,t): LET (l1,l2) = partition(t,LAMBDA x: x < h) IN
	    	       append(quick_sort(l1),s_insert(h,quick_sort(l2)))
	    ENDCASES
  MEASURE length(l)


  % All sorts are doing the same thing
  merge_insert: LEMMA merge_sort(l) = insert_sort(l)
  merge_quick : LEMMA merge_sort(l) = quick_sort(l)
  quick_insert: LEMMA quick_sort(l) = insert_sort(l)

  % Sorts deal with lists as sets
  equal_insert: LEMMA equal?(l1,l2) IMPLIES insert_sort(l1) = insert_sort(l2)
  equal_merge : LEMMA equal?(l1,l2) IMPLIES merge_sort(l1) = merge_sort(l2)
  equal_quick : LEMMA equal?(l1,l2) IMPLIES quick_sort(l1) = quick_sort(l2)


END sortedlist
