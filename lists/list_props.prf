(more_list_props)
(list2_props
 (zip_TCC1 0
  (zip_TCC1-1 nil 3579528446 ("" (subtype-tcc) nil nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (K formal-type-decl nil list2_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (zip_TCC2 0
  (zip_TCC2-1 nil 3579528446 ("" (subtype-tcc) nil nil) nil nil))
 (zip_TCC3 0
  (zip_TCC3-1 nil 3579528446 ("" (subtype-tcc) nil nil) nil nil))
 (zip_TCC4 0
  (zip_TCC4-1 nil 3579528446 ("" (subtype-tcc) nil nil) nil nil))
 (zip_TCC5 0
  (zip_TCC5-1 nil 3579528446 ("" (subtype-tcc) nil nil) nil nil))
 (zip_TCC6 0
  (zip_TCC6-1 nil 3579528446 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (V formal-type-decl nil list2_props nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (K formal-type-decl nil list2_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (zip_TCC7 0
  (zip_TCC7-1 nil 3579528446 ("" (subtype-tcc) nil nil) nil nil))
 (assoc_TCC1 0
  (assoc_TCC1-1 nil 3579528446 ("" (subtype-tcc) nil nil) nil nil))
 (assoc_TCC2 0
  (assoc_TCC2-2 nil 3579528543 ("" (postpone) nil nil) nil nil)
  (assoc_TCC2-1 nil 3579528446 ("" (subtype-tcc) nil nil) nil nil))
 (assoc_TCC3 0
  (assoc_TCC3-1 nil 3579528446 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (K formal-type-decl nil list2_props nil)
    (V formal-type-decl nil list2_props nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil)))
(list_map_props
 (map_curr 0
  (map_curr-1 nil 3578940818 ("" (induct-and-simplify l) nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (S formal-type-decl nil list_map_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (T formal-type-decl nil list_map_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (member_map 0
  (member_map-1 nil 3577637101 ("" (induct-and-simplify l) nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (S formal-type-decl nil list_map_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (T formal-type-decl nil list_map_props nil)
    (list_induction formula-decl nil list_adt nil))
   nil))
 (map_member 0
  (map_member-1 nil 3577718713 ("" (induct-and-simplify l) nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (S formal-type-decl nil list_map_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-type-decl nil list_map_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak)))

