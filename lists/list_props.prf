(list_filter_props
 (filter_member_TCC1 0
  (filter_member_TCC1-1 nil 3578838340
   ("" (recursive-judgement-tcc) nil nil)
   ((member def-decl "bool" list_props nil)) nil))
 (filter_member_TCC2 0
  (filter_member_TCC2-1 nil 3578838340 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil list_filter_props nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil))
   nil))
 (filter_member_TCC3 0
  (filter_member_TCC3-1 nil 3578838340
   ("" (recursive-judgement-tcc) nil nil) nil nil)))
(more_list_props
 (length_cons 0
  (length_cons-1 nil 3578682956 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)) shostak))
 (length_cdr 0
  (length_cdr-1 nil 3578682961 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (filter_cons 0
  (filter_cons-1 nil 3578247674 ("" (grind) nil nil) nil shostak))
 (filter_null 0
  (filter_null-1 nil 3578247680 ("" (grind) nil nil) nil shostak))
 (filter_append 0
  (filter_append-1 nil 3578161497 ("" (induct-and-simplify l) nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append def-decl "list[T]" list_props nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (remove_TCC1 0
  (remove_TCC1-1 nil 3578935435 ("" (subtype-tcc) nil nil) nil nil))
 (every_forall 0
  (every_forall-1 nil 3577636177
   ("" (induct-and-simplify l :if-match all)
    (("1" (typepred "x!1") (("1" (grind) nil nil)) nil)
     ("2" (typepred "x!1") (("2" (grind) nil nil)) nil)
     ("3" (typepred "x!1")
      (("3" (reveal -1)
        (("3" (grind) (("3" (inst -1 "x!1") nil nil)) nil)) nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (member def-decl "bool" list_props nil))
   shostak))
 (some_exists 0
  (some_exists-1 nil 3577636393
   ("" (induct-and-simplify l :if-match all)
    (("1" (typepred "x!1") (("1" (grind) nil nil)) nil)
     ("2" (typepred "x!1") (("2" (grind) nil nil)) nil)
     ("3" (typepred "x!1")
      (("3" (reveal -1)
        (("3" (grind) (("3" (inst 1 "x!1") nil nil)) nil)) nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (member def-decl "bool" list_props nil))
   shostak))
 (member_subset 0
  (member_subset-1 nil 3577708631
   ("" (grind :rewrites "every_forall") nil nil)
   ((subset? const-decl "bool" more_list_props nil)
    (every_forall formula-decl nil more_list_props nil)
    (member def-decl "bool" list_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (subset_order 0
  (subset_order-1 nil 3577708818
   ("" (grind :rewrites "every_forall") nil nil)
   ((preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (subset? const-decl "bool" more_list_props nil)
    (every_forall formula-decl nil more_list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil more_list_props nil)
    (list type-decl nil list_adt nil)
    (member def-decl "bool" list_props nil))
   shostak))
 (subset_null 0
  (subset_null-1 nil 3578244990 ("" (grind) nil nil)
   ((subset? const-decl "bool" more_list_props nil)) shostak))
 (subset_cons 0
  (subset_cons-1 nil 3578244995 ("" (grind) nil nil)
   ((subset? const-decl "bool" more_list_props nil)) shostak))
 (member_equal 0
  (member_equal-1 nil 3577708838
   ("" (grind :rewrites member_subset) nil nil)
   ((equal? const-decl "bool" more_list_props nil)
    (member_subset formula-decl nil more_list_props nil)
    (T formal-type-decl nil more_list_props nil))
   shostak))
 (equal_equiv 0
  (equal_equiv-1 nil 3577708854
   ("" (grind :rewrites member_equal) nil nil)
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (member_equal formula-decl nil more_list_props nil)
    (T formal-type-decl nil more_list_props nil))
   shostak))
 (equal_reflexive 0
  (equal_reflexive-1 nil 3577714643
   ("" (grind :theories (orders) :rewrites (equal_equiv every_forall))
    nil nil)
   ((every_forall formula-decl nil more_list_props nil)
    (subset? const-decl "bool" more_list_props nil)
    (equal? const-decl "bool" more_list_props nil))
   shostak))
 (equal_transitive 0
  (equal_transitive-1 nil 3577714736
   ("" (grind :theories (orders) :rewrites (equal_equiv every_forall))
    nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil more_list_props nil)
    (list type-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (every_forall formula-decl nil more_list_props nil)
    (subset? const-decl "bool" more_list_props nil)
    (equal? const-decl "bool" more_list_props nil))
   shostak))
 (equal_symmetric 0
  (equal_symmetric-1 nil 3577714740
   ("" (grind :theories (orders) :rewrites (equal_equiv every_forall))
    nil nil)
   ((every_forall formula-decl nil more_list_props nil)
    (subset? const-decl "bool" more_list_props nil)
    (equal? const-decl "bool" more_list_props nil))
   shostak))
 (cons_equal 0
  (cons_equal-1 nil 3577708872
   ("" (grind :rewrites every_forall) nil nil)
   ((equal? const-decl "bool" more_list_props nil)
    (subset? const-decl "bool" more_list_props nil)
    (every_forall formula-decl nil more_list_props nil)
    (member def-decl "bool" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil more_list_props nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil))
   shostak))
 (append_cons 0
  (append_cons-1 nil 3578247842 ("" (grind) nil nil)
   ((append def-decl "list[T]" list_props nil)) shostak))
 (reverse_null 0
  (reverse_null-1 nil 3578247847 ("" (grind) nil nil)
   ((reverse def-decl "list[T]" list_props nil)) shostak))
 (reverse_cons 0
  (reverse_cons-1 nil 3578247853 ("" (grind) nil nil)
   ((reverse def-decl "list[T]" list_props nil)) shostak))
 (nth_cons_TCC1 0
  (nth_cons_TCC1-1 nil 3578205543 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)) nil))
 (nth_cons_TCC2 0
  (nth_cons_TCC2-1 nil 3578207351 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-type-decl nil more_list_props nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (nth_cons 0
  (nth_cons-1 nil 3578207426 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-type-decl nil more_list_props nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (nth_cdr_TCC1 0
  (nth_cdr_TCC1-1 nil 3578682766
   ("" (grind :exclude length :rewrites length_cdr) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-type-decl nil more_list_props nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length_cdr formula-decl nil more_list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (nth_cdr_TCC2 0
  (nth_cdr_TCC2-1 nil 3578682766 ("" (grind) nil nil) nil nil))
 (nth_cdr 0
  (nth_cdr-1 nil 3578682769 ("" (grind) nil nil)
   ((nth def-decl "T" list_props nil)) shostak))
 (nth_append_TCC1 0
  (nth_append_TCC1-1 nil 3578205073
   ("" (grind :rewrites length_append) nil nil)
   ((length_append formula-decl nil list_props nil)) nil))
 (nth_append_TCC2 0
  (nth_append_TCC2-1 nil 3578205073 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-type-decl nil more_list_props nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (nth_append 0
  (nth_append-1 nil 3578205107
   (""
    (induct-and-simplify l :rewrites
     (nth_cons length_append append_null) :if-match nil)
    (("1" (rewrite nth_cons) (("1" (grind) nil nil)) nil)
     ("2" (typepred "i!1") (("2" (grind) nil nil)) nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth_cons formula-decl nil more_list_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (length_append formula-decl nil list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (nth_reverse_TCC1 0
  (nth_reverse_TCC1-1 nil 3578162653
   ("" (grind :rewrites length_reverse) nil nil)
   ((length_reverse formula-decl nil list_props nil)) nil))
 (nth_reverse_TCC2 0
  (nth_reverse_TCC2-1 nil 3578205073 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (nth_reverse 0
  (nth_reverse-1 nil 3578204771
   (""
    (induct-and-simplify l :rewrites
     (nth_append length_reverse nth_append nth_cons) :exclude nth
     :if-match nil)
    (("1" (typepred "i!1") (("1" (grind) nil nil)) nil)
     ("2" (typepred "i!1")
      (("2" (rewrite nth_append) (("2" (grind) nil nil)) nil)) nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nth_cons formula-decl nil more_list_props nil)
    (nth_append formula-decl nil more_list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_reverse formula-decl nil list_props nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (nth_equal_TCC1 0
  (nth_equal_TCC1-1 nil 3578326794 ("" (subtype-tcc) nil nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (nth_equal 0
  (nth_equal-1 nil 3578326797
   ("" (induct-and-simplify l1 :if-match nil)
    (("1" (inst -1 "cdr(l2!1)")
      (("1" (prop)
        (("1" (decompose-equality 1)
          (("1" (inst -5 0) (("1" (grind) nil nil)) nil)) nil)
         ("2" (expand length -1 2) (("2" (grind) nil nil)) nil)
         ("3" (skeep)
          (("3" (inst -2 "i+1") (("3" (grind) nil nil)) nil)) nil))
        nil)
       ("2" (grind) nil nil))
      nil)
     ("2" (grind) (("2" (decompose-equality -1) nil nil)) nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (member_append 0
  (member_append-1 nil 3577636826 ("" (induct-and-simplify l) nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil))
   nil))
 (member_reverse 0
  (member_reverse-1 nil 3577637967
   ("" (induct-and-simplify l :rewrites member_append) nil nil)
   ((member_append formula-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil more_list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (member_nth 0
  (member_nth-1 nil 3577637302
   ("" (induct-and-simplify l :if-match nil)
    (("1" (typepred "i!1") (("1" (grind) nil nil)) nil)
     ("2" (inst 1 0) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
     ("3" (inst -1 "x!1")
      (("3" (prop)
        (("3" (skeep)
          (("3" (inst 1 "i + 1") (("3" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("4" (rewrite nth_cons)
      (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
    nil)
   ((nth_cons formula-decl nil more_list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (flatten_null 0
  (flatten_null-1 nil 3577728887 ("" (grind) nil nil)
   ((flatten const-decl "list[T]" more_list_props nil)
    (reduce adt-def-decl "[list[T] -> range]" list_adt_reduce nil))
   shostak))
 (flatten_cons 0
  (flatten_cons-1 nil 3577728891 ("" (induct-and-simplify ll) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (flatten const-decl "list[T]" more_list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (reduce adt-def-decl "[list[T] -> range]" list_adt_reduce nil))
   shostak))
 (flatten_member 0
  (flatten_member-1 nil 3577728794
   (""
    (induct-and-simplify ll :rewrites (flatten_cons member_append)
     :if-match all)
    nil nil)
   ((append def-decl "list[T]" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (member_append formula-decl nil more_list_props nil)
    (flatten_cons formula-decl nil more_list_props nil)
    (reduce adt-def-decl "[list[T] -> range]" list_adt_reduce nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil more_list_props nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (flatten const-decl "list[T]" more_list_props nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (uniques?_TCC1 0
  (uniques?_TCC1-1 nil 3577713883 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (uniques_TCC1 0
  (uniques_TCC1-1 nil 3577713883 ("" (grind) nil nil)
   ((uniques? def-decl "bool" more_list_props nil)
    (subset? const-decl "bool" more_list_props nil)
    (member def-decl "bool" list_props nil)
    (equal? const-decl "bool" more_list_props nil))
   nil))
 (uniques_TCC2 0
  (uniques_TCC2-1 nil 3577713883 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (uniques_TCC3 0
  (uniques_TCC3-1 nil 3577713883
   (""
    (apply (then
            (grind :exclude equal? :rewrites
             ("cons_equal" "member_equal"))
            (typepred "v!1(t!1)") (grind)))
    nil nil)
   ((member_equal formula-decl nil more_list_props nil)
    (member def-decl "bool" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil more_list_props nil)
    (list type-decl nil list_adt nil)
    (uniques? def-decl "bool" more_list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (equal? const-decl "bool" more_list_props nil))
   nil))
 (uniques_TCC4 0
  (uniques_TCC4-1 nil 3577713883
   ("" (use "equal_equiv")
    (("" (grind :theories ("orders" "relations") :exclude equal?)
      (("1" (typepred "v!1(t!1)")
        (("1" (grind :rewrites member_equal) nil nil)) nil)
       ("2" (typepred "v!1(t!1)")
        (("2" (use "equal_equiv")
          (("2"
            (grind :theories ("orders" "relations") :exclude equal?
             :rewrites member_equal)
            nil nil))
          nil))
        nil))
      nil))
    nil)
   ((reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil)
    (uniques? def-decl "bool" more_list_props nil)
    (T formal-type-decl nil more_list_props nil)
    (list type-decl nil list_adt nil)
    (member_equal formula-decl nil more_list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (equal? const-decl "bool" more_list_props nil)
    (member def-decl "bool" list_props nil)
    (equal_equiv formula-decl nil more_list_props nil))
   nil))
 (find_TCC1 0
  (find_TCC1-1 nil 3577708630 ("" (termination-tcc) nil nil) nil nil))
 (find_TCC2 0
  (find_TCC2-1 nil 3578760878
   ("" (grind)
    (("" (inst 1 0) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (find_TCC3 0
  (find_TCC3-1 nil 3578760878 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (find_TCC4 0
  (find_TCC4-1 nil 3578760878
   ("" (grind)
    (("" (typepred "v!1(p!1, t!1)")
      (("" (expand every)
        (("" (grind :if-match nil)
          (("" (inst 3 "i!1 + 1")
            (("1" (lemma nth_cons) (("1" (grind) nil nil)) nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (lift type-decl nil lift_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (T formal-type-decl nil more_list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_cons formula-decl nil more_list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (find_some_TCC1 0
  (find_some_TCC1-1 nil 3578760878 ("" (subtype-tcc) nil nil) nil nil))
 (find_some 0
  (find_some-1 nil 3578756553 ("" (induct-and-simplify l) nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (lift type-decl nil lift_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (find def-decl "lift
    [{x: (p) |
        EXISTS (i: below(length(l))):
          x = nth(l, i) AND (FORALL (j: below(i)): NOT p(nth(l, j)))}]"
      more_list_props nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (find_first_TCC1 0
  (find_first_TCC1-1 nil 3578756552 ("" (subtype-tcc) nil nil) nil
   nil))
 (find_first_TCC2 0
  (find_first_TCC2-1 nil 3578756552 ("" (subtype-tcc) nil nil) nil
   nil))
 (find_first_TCC3 0
  (find_first_TCC3-1 nil 3578756552 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil))
   nil))
 (find_first_TCC4 0
  (find_first_TCC4-1 nil 3578756552 ("" (subtype-tcc) nil nil) nil
   nil))
 (find_first_TCC5 0
  (find_first_TCC5-1 nil 3578756552
   ("" (lemma nth_cons) (("" (lazy-grind) nil nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (pred type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nth def-decl "T" list_props nil)
    (nth_cons formula-decl nil more_list_props nil))
   nil))
 (find_first_some 0
  (find_first_some-1 nil 3578756566
   ("" (induct-and-simplify l) nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (find_first def-decl "lift
    [{i: below(length(l)) |
        p(nth(l, i)) AND (FORALL (j: below(i)): NOT p(nth(l, j)))}]"
     more_list_props nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (find_char 0
  (find_char-1 nil 3577709078 ("" (induct-and-simplify l) nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (lift type-decl nil lift_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (find def-decl "lift
    [{x: (p) |
        EXISTS (i: below(length(l))):
          x = nth(l, i) AND (FORALL (j: below(i)): NOT p(nth(l, j)))}]"
      more_list_props nil)
    (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (bottom adt-constructor-decl "(bottom?)" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (up adt-constructor-decl "[T -> (up?)]" lift_adt nil)
    (member def-decl "bool" list_props nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (rev_append_TCC1 0
  (rev_append_TCC1-1 nil 3577708630 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (rev_append_char 0
  (rev_append_char-1 nil 3577709091
   ("" (induct-and-simplify l1 :rewrites "append_assoc") nil nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append_assoc formula-decl nil list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil more_list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (rev_append def-decl "list[T]" more_list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (subterm_char 0
  (subterm_char-1 nil 3578160070 ("" (grind) nil nil)
   ((subterm adt-def-decl "boolean" list_adt nil)) shostak))
 (subterm_cons 0
  (subterm_cons-1 nil 3578159137 ("" (grind) nil nil)
   ((subterm adt-def-decl "boolean" list_adt nil)) shostak))
 (subterm_append 0
  (subterm_append-1 nil 3578155280
   (""
    (induct-and-simplify l :defs nil :if-match nil :rewrites
     (subterm_cons))
    (("1" (grind) nil nil)
     ("2" (inst + null) (("2" (grind) nil nil)) nil)
     ("3" (inst?)
      (("3" (simplify)
        (("3" (skolem!)
          (("3" (inst + "cons(cons1_var!1, l1!1)")
            (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (subterm_po name-judgement "(partial_order?[list[T]])" adt_props
     nil)
    (subterm_cons formula-decl nil more_list_props nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append def-decl "list[T]" list_props nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (append_subterm 0
  (append_subterm-1 nil 3578159353
   ("" (induct-and-simplify l1 :defs nil)
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((subterm_po name-judgement "(partial_order?[list[T]])" adt_props
     nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subterm adt-def-decl "boolean" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (subterm_length 0
  (subterm_length-1 nil 3578159804
   ("" (induct-and-simplify m :defs nil :rewrites subterm_char)
    (("" (grind) nil nil)) nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_cons formula-decl nil more_list_props nil)
    (subterm_po name-judgement "(partial_order?[list[T]])" adt_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subterm_char formula-decl nil more_list_props nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (subterm_null 0
  (subterm_null-1 nil 3578159861 ("" (induct-and-simplify l) nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subterm adt-def-decl "boolean" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (subterm_po name-judgement "(partial_order?[list[T]])" adt_props
     nil))
   shostak))
 (subterm_cons1 0
  (subterm_cons1-1 nil 3578159876 ("" (grind) nil nil)
   ((subterm adt-def-decl "boolean" list_adt nil)) shostak))
 (subterm_cons2 0
  (subterm_cons2-1 nil 3578159916
   (""
    (induct-and-simplify m :defs nil :rewrites
     (subterm_char subterm_null))
    (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subterm_po name-judgement "(partial_order?[list[T]])" adt_props
     nil)
    (subterm_char formula-decl nil more_list_props nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (subterm_subset 0
  (subterm_subset-1 nil 3578161077
   (""
    (induct-and-simplify m :defs nil :rewrites
     (subterm_char member_subset))
    (("" (grind) nil nil)) nil)
   ((member def-decl "bool" list_props nil)
    (member_subset formula-decl nil more_list_props nil)
    (subterm_char formula-decl nil more_list_props nil)
    (subterm_po name-judgement "(partial_order?[list[T]])" adt_props
     nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" list_adt nil)
    (subset? const-decl "bool" more_list_props nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak)))
(list2_props
 (zip_TCC1 0
  (zip_TCC1-1 nil 3578322754 ("" (subtype-tcc) nil nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (K formal-type-decl nil list2_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (zip_TCC2 0
  (zip_TCC2-1 nil 3578322754 ("" (subtype-tcc) nil nil) nil nil))
 (zip_TCC3 0
  (zip_TCC3-1 nil 3578322754 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (V formal-type-decl nil list2_props nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (K formal-type-decl nil list2_props nil)
    (length def-decl "nat" list_props nil))
   nil))
 (zip_TCC4 0
  (zip_TCC4-1 nil 3578322754 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (V formal-type-decl nil list2_props nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (K formal-type-decl nil list2_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (zip_TCC5 0
  (zip_TCC5-1 nil 3578322754
   ("" (grind)
    (("" (expand length 1 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (expand length -2 1) (("1" (grind) nil nil)) nil)
           ("2" (expand length -1 1) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (V formal-type-decl nil list2_props nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (K formal-type-decl nil list2_props nil))
   nil))
 (zip_TCC6 0
  (zip_TCC6-1 nil 3578322754 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (V formal-type-decl nil list2_props nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (K formal-type-decl nil list2_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (zip_TCC7 0
  (zip_TCC7-1 nil 3578322754
   ("" (grind)
    (("" (expand nth 1 1)
      (("" (grind)
        (("" (typepred "v!1(t!1, cdr(vs!1))")
          (("1" (grind) nil nil)
           ("2" (grind)
            (("2" (expand length 1 1)
              (("2" (expand length -2 1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (V formal-type-decl nil list2_props nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (K formal-type-decl nil list2_props nil)
    (length def-decl "nat" list_props nil))
   nil))
 (assoc_TCC1 0
  (assoc_TCC1-1 nil 3578260179
   ("" (lemma find_char)
    ((""
      (grind :theories (adt_props more_list_props) :exclude member_nth)
      nil nil))
    nil)
   ((has_key const-decl "bool" list2_props nil)
    (some_exists formula-decl nil more_list_props nil)
    (member def-decl "bool" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (find_char formula-decl nil more_list_props nil)
    (K formal-type-decl nil list2_props nil)
    (V formal-type-decl nil list2_props nil))
   nil))
 (assoc_TCC2 0
  (assoc_TCC2-1 nil 3578260179
   ("" (lemma find_char)
    ((""
      (grind :theories (adt_props more_list_props) :exclude member_nth)
      (("" (rewrite -1 :dir rl)
        (("" (grind) (("" (eta "[K, V]") (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((some_exists formula-decl nil more_list_props nil)
    (has_key const-decl "bool" list2_props nil)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (find_char formula-decl nil more_list_props nil)
    (K formal-type-decl nil list2_props nil)
    (V formal-type-decl nil list2_props nil))
   nil))
 (assoc_up 0
  (assoc_up-1 nil 3578320139
   ("" (lemma find_char)
    ((""
      (grind :theories (adt_props more_list_props) :exclude member_nth)
      (("" (eta "[K, V]")
        (("" (grind)
          (("" (rewrite -1 :dir rl) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (find def-decl "lift
    [{x: (p) |
        EXISTS (i: below(length(l))):
          x = nth(l, i) AND (FORALL (j: below(i)): NOT p(nth(l, j)))}]"
      more_list_props nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (lift type-decl nil lift_adt nil)
    (find_char formula-decl nil more_list_props nil)
    (K formal-type-decl nil list2_props nil)
    (V formal-type-decl nil list2_props nil))
   shostak))
 (assoc_TCC3 0
  (assoc_TCC3-1 nil 3578760879 ("" (subtype-tcc) nil nil) nil nil))
 (remove_assoc_cons 0
  (remove_assoc_cons-1 nil 3578320920 ("" (grind) nil nil)
   ((/= const-decl "boolean" notequal nil)
    (remove_assoc const-decl "list[[K, V]]" list2_props nil))
   shostak))
 (remove_assoc_assoc 0
  (remove_assoc_assoc-1 nil 3578320555
   (""
    (induct-and-simplify l :theories (adt_props more_list_props)
     :exclude member_nth :if-match nil :rewrites (remove_assoc_cons)
     :defs nil)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil))
    nil)
   ((/= const-decl "boolean" notequal nil)
    (find def-decl "lift
    [{x: (p) |
        EXISTS (i: below(length(l))):
          x = nth(l, i) AND (FORALL (j: below(i)): NOT p(nth(l, j)))}]"
      more_list_props nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lift type-decl nil lift_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (has_key const-decl "bool" list2_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (member def-decl "bool" list_props nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (remove_assoc const-decl "list[[K, V]]" list2_props nil)
    (bottom adt-constructor-decl "(bottom?)" lift_adt nil)
    (V formal-type-decl nil list2_props nil)
    (K formal-type-decl nil list2_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak)))
(list_map_props
 (map_curr 0
  (map_curr-1 nil 3578940818 ("" (induct-and-simplify l) nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (S formal-type-decl nil list_map_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (T formal-type-decl nil list_map_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (member_map 0
  (member_map-1 nil 3577637101 ("" (induct-and-simplify l) nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (S formal-type-decl nil list_map_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (T formal-type-decl nil list_map_props nil)
    (list_induction formula-decl nil list_adt nil))
   nil))
 (map_member 0
  (map_member-1 nil 3577718713 ("" (induct-and-simplify l) nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (S formal-type-decl nil list_map_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-type-decl nil list_map_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak)))

