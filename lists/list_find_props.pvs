list_find_props[T:TYPE]: THEORY
BEGIN
  IMPORTING list_filter_props[T]

  l, m, l1, l2: VAR list[T]
  ll: VAR list[list[T]]
  p: VAR pred[T]
  pi: VAR pred[[nat,T]]
  a, b, c: VAR T
  x, y, z: VAR T
  i,j: VAR nat


  % IMPORT CONVERSION INSTEAD OF WRITING IT AGAIN !!!
  upcast(x:T): lift[T] = up(x)
  downcast(x:(up?[T])): T = down(x)
  upcast_nat(n:nat): lift[nat] = up(n)
  downcast_nat(n:(up?[nat])): nat = down(n)

  CONVERSION+ upcast,downcast,upcast_nat,downcast_nat


  % Find an element satisfying a predicate, returns the first of the list
  find_aux(l,pi,i): RECURSIVE lift[{ r:[below(length(l)),T] | LET (j,x)=r IN pi(i+j,x) AND x = nth(l,j) AND FORALL (k:below(j)): NOT pi(i+k,nth(l,k)) }] = 
  	CASES l OF
	null: bottom,
	cons(h,t):
	   IF pi(i,h)
	      THEN up(i,h)
	      ELSE CASES find_aux(t,pi,i+1) OF
	      	   bottom: bottom,
		   up(r): LET (j,x)=r IN up(j+1,x)
		   ENDCASES
	   ENDIF
	ENDCASES
  MEASURE length(l)
		   

  find_pos(l,pi): lift[ { i:below(length(l)) | pi(i,nth(l,i)) AND 
  		  	  		       FORALL (j:below(i)): NOT pi(j,nth(l,j)) }] = 
		CASES find_aux(l,pi,0) OF
		bottom: bottom,
		up(r) : up(r`1)
		ENDCASES
  find_pos_elt(l,pi): lift[ { x:T | EXISTS (i:below(length(l))): x = nth(l,i) AND pi(i,x) AND 
  		      	      	    FORALL (j:below(i)): NOT pi(j,nth(l,j)) }] = 
		CASES find_aux(l,pi,0) OF
		bottom: bottom,
		up(r) : up(r`2)
		ENDCASES

  find(l,p): MACRO lift[ { i:below(length(l)) | p(nth(l,i)) AND FORALL (j:below(i)): NOT p(nth(l,j)) }] = find_pos(l,LAMBDA i,x: p(x))
  find_elt(l,p): MACRO lift[{ x:T | EXISTS (i:below(length(l))): x = nth(l,i) AND p(x) AND FORALL (j:below(i)): NOT p(nth(l,j)) }] = find_pos_elt(l,LAMBDA i,x: p(x))

  
  % Find find an element IFF there is one to find
  find_some: THEOREM
    some(p)(l) IFF up?(find(l,p))
  find_elt_some: THEOREM 
    some(p)(l) IFF up?(find_elt(l,p))
 
  % Link between different versions of find
  find_pos_elt_bottom: LEMMA bottom?(find_pos(l,pi)) IFF bottom?(find_pos_elt(l,pi))
  find_pos_elt: LEMMA up?(find_pos(l,pi)) IMPLIES nth(l,find_pos(l,pi)) = down(find_pos_elt(l,pi))

  find_elt_bottom: LEMMA bottom?(find(l,p)) IFF bottom?(find_elt(l,p))
  find_elt: LEMMA up?(find(l,p)) IMPLIES nth(l,find(l,p)) = find_elt(l,p) 

  % Find/Filter
  find_filter_pos_null: LEMMA bottom?(find_pos_elt(l,pi)) IFF null?(filter_pos(l,pi))
  find_filter_pos_car: LEMMA up?(find_pos_elt(l,pi)) IMPLIES find_pos_elt(l,pi) = car(filter_pos(l,pi)) 

  find_filter_null: LEMMA bottom?(find_elt(l,p)) IFF null?(filter(l,p))
  find_filter_car:  LEMMA up?(find_elt(l,p)) IMPLIES find_elt(l,p) = car(filter(l,p))
  

  find_char: THEOREM
    CASES find_elt(l, p) OF
      bottom: NOT some(p)(l),
      up(r): p(r) AND member(r, l)
    ENDCASES

  
END list_find_props
