list_sets_props[T:TYPE]: THEORY
BEGIN
  IMPORTING list_filter_props[T]

  l, m, l1, l2: VAR list[T]
  ll: VAR list[list[T]]
  p: VAR pred[T]
  P: VAR pred[list[T]]
  a, b, c: VAR T
  x, y, z: VAR T
  i: VAR nat

  % Subset relation
  subset?(l, m): bool = every(member(m))(l)
  member_subset: THEOREM subset?(l, m) IFF (FORALL x: member(x, l) IMPLIES member(x, m))
  subset_order: THEOREM preorder?(subset?)

  subset_null: THEOREM subset?(null,m)
  subset_cons: THEOREM subset?(cons(x,l),m) IFF member(x,m) AND subset?(l,m)

  % Set equality
  equal?(l, m): bool = subset?(l, m) AND subset?(m, l)
  member_equal: THEOREM equal?(l, m) IFF (FORALL x: member(x, l) IFF member(x, m))
  equal_equiv: THEOREM equivalence?(equal?)
  equal_reflexive: THEOREM equal?(l, l)
  equal_transitive: THEOREM
    equal?(l, l1) AND equal?(l1, l2) IMPLIES equal?(l, l2)
  equal_symmetric: THEOREM
    equal?(l1, l2) IMPLIES equal?(l2, l1)
  cons_equal: THEOREM member(x, l) IMPLIES equal?(l, cons(x, l))

  % Lists without duplication
  uniques?(l): RECURSIVE bool =
    CASES l OF
      null: TRUE,
      cons(h, t): NOT member(h, t) AND uniques?(t)
    ENDCASES
  MEASURE length(l)

  uniques(l): RECURSIVE { m:(uniques?) | equal?(m, l) } =
    CASES l OF
      null: null,
      cons(h, t):
        IF member(h, t)
	  THEN uniques(t)
	  ELSE cons(h, uniques(t))
	ENDIF
    ENDCASES
  MEASURE length(l)

  % Definition of uniques with filter, just to inherit properties
  uniques_filter: LEMMA 
  	uniques(l) = filter_pos(l,LAMBDA i,x: FORALL (j:bl(l)): i < j IMPLIES nth(l,j) /= x)
  uniques_uniques: LEMMA uniques?(l) IMPLIES uniques(l) = l

  % All the basic properties on uniques can be easily proved from these two lemmas
  % For instance, to prove that 
  % uniques(l) AND uniques(m) IMLPIES uniques?(append(l,m))
  % you actually need to prove : uniques?(append(unique(l),unique(m)))
  % (thanks to uniques_uniques)
  % then finish the proof with uniques_filter and filter_append

END list_sets_props


