(list_subterm_props
 (subterm_char 0
  (subterm_char-1 nil 3578160070 ("" (grind) nil nil)
   ((subterm adt-def-decl "boolean" list_adt nil)) shostak))
 (subterm_cons 0
  (subterm_cons-1 nil 3578159137 ("" (grind) nil nil)
   ((subterm adt-def-decl "boolean" list_adt nil)) shostak))
 (subterm_append 0
  (subterm_append-1 nil 3578155280
   (""
    (induct-and-simplify l :defs nil :if-match nil :rewrites
     (subterm_cons))
    (("1" (grind) nil nil)
     ("2" (inst + null) (("2" (grind) nil nil)) nil)
     ("3" (inst?)
      (("3" (simplify)
        (("3" (skolem!)
          (("3" (inst + "cons(cons1_var!1, l1!1)")
            (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (subterm_po name-judgement "(partial_order?[list[T]])"
     list_subterm_props nil)
    (subterm_cons formula-decl nil list_subterm_props nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append def-decl "list[T]" list_props nil)
    (T formal-type-decl nil list_subterm_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (append_subterm 0
  (append_subterm-1 nil 3578159353
   ("" (induct-and-simplify l1 :defs nil)
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((subterm_po name-judgement "(partial_order?[list[T]])"
     list_subterm_props nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subterm adt-def-decl "boolean" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (T formal-type-decl nil list_subterm_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (subterm_length 0
  (subterm_length-1 nil 3578159804
   ("" (induct-and-simplify m :defs nil :rewrites subterm_char)
    (("" (lemma length_cons)
      (("" (inst - cons2_var!1 cons1_var!1)
        (("" (rewrite -2 2) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_cons formula-decl nil list_basic_props nil)
    (subterm_po name-judgement "(partial_order?[list[T]])"
     list_subterm_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subterm_char formula-decl nil list_subterm_props nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (T formal-type-decl nil list_subterm_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (subterm_null 0
  (subterm_null-1 nil 3578159861 ("" (induct-and-simplify l) nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subterm adt-def-decl "boolean" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (T formal-type-decl nil list_subterm_props nil)
    (list_induction formula-decl nil list_adt nil)
    (subterm_po name-judgement "(partial_order?[list[T]])"
     list_subterm_props nil))
   shostak))
 (subterm_cons1 0
  (subterm_cons1-1 nil 3578159876 ("" (grind) nil nil)
   ((subterm adt-def-decl "boolean" list_adt nil)) shostak))
 (subterm_cons2 0
  (subterm_cons2-1 nil 3578159916
   (""
    (induct-and-simplify m :defs nil :rewrites
     (subterm_char subterm_null))
    (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subterm_po name-judgement "(partial_order?[list[T]])"
     list_subterm_props nil)
    (subterm_char formula-decl nil list_subterm_props nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (T formal-type-decl nil list_subterm_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (subterm_subset 0
  (subterm_subset-1 nil 3578161077
   (""
    (induct-and-simplify m :defs nil :rewrites
     (subterm_char member_subset))
    (("" (grind) nil nil)) nil)
   ((member def-decl "bool" list_props nil)
    (member_subset formula-decl nil list_sets_props nil)
    (subterm_char formula-decl nil list_subterm_props nil)
    (subterm_po name-judgement "(partial_order?[list[T]])"
     list_subterm_props nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" list_adt nil)
    (subset? const-decl "bool" list_sets_props nil)
    (T formal-type-decl nil list_subterm_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak)))

