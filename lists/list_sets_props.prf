(list_sets_props
 (member_subset 0
  (member_subset-1 nil 3577708631
   ("" (grind :rewrites "every_forall") nil nil)
   ((subset? const-decl "bool" list_sets_props nil)
    (every_forall formula-decl nil list_basic_props nil)
    (T formal-type-decl nil list_sets_props nil)
    (member def-decl "bool" list_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (subset_order 0
  (subset_order-1 nil 3577708818
   ("" (grind :rewrites "every_forall") nil nil)
   ((preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (subset? const-decl "bool" list_sets_props nil)
    (every_forall formula-decl nil list_basic_props nil)
    (T formal-type-decl nil list_sets_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (member def-decl "bool" list_props nil))
   shostak))
 (subset_null 0
  (subset_null-1 nil 3578244990 ("" (grind) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)
    (subset? const-decl "bool" list_sets_props nil))
   shostak))
 (subset_cons 0
  (subset_cons-1 nil 3578244995 ("" (grind) nil nil)
   ((T formal-type-decl nil list_sets_props nil)
    (every_forall formula-decl nil list_basic_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (subset? const-decl "bool" list_sets_props nil))
   shostak))
 (member_equal 0
  (member_equal-1 nil 3577708838
   ("" (grind :rewrites member_subset) nil nil)
   ((equal? const-decl "bool" list_sets_props nil)
    (member_subset formula-decl nil list_sets_props nil)
    (T formal-type-decl nil list_sets_props nil))
   shostak))
 (equal_equiv 0
  (equal_equiv-1 nil 3577708854
   ("" (grind :rewrites member_equal) nil nil)
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (member_equal formula-decl nil list_sets_props nil)
    (T formal-type-decl nil list_sets_props nil))
   shostak))
 (equal_reflexive 0
  (equal_reflexive-1 nil 3577714643
   ("" (grind :theories (orders) :rewrites (equal_equiv every_forall))
    nil nil)
   ((T formal-type-decl nil list_sets_props nil)
    (every_forall formula-decl nil list_basic_props nil)
    (subset? const-decl "bool" list_sets_props nil)
    (equal? const-decl "bool" list_sets_props nil))
   shostak))
 (equal_transitive 0
  (equal_transitive-1 nil 3577714736
   ("" (grind :theories (orders) :rewrites (equal_equiv every_forall))
    nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (l2!1 skolem-const-decl "list[T]" list_sets_props nil)
    (x!1 skolem-const-decl "{x_1 | member(x_1, l2!1)}" list_sets_props
     nil)
    (l1!1 skolem-const-decl "list[T]" list_sets_props nil)
    (T formal-type-decl nil list_sets_props nil)
    (every_forall formula-decl nil list_basic_props nil)
    (subset? const-decl "bool" list_sets_props nil)
    (equal? const-decl "bool" list_sets_props nil))
   shostak))
 (equal_symmetric 0
  (equal_symmetric-1 nil 3577714740
   ("" (grind :theories (orders) :rewrites (equal_equiv every_forall))
    nil nil)
   ((T formal-type-decl nil list_sets_props nil)
    (every_forall formula-decl nil list_basic_props nil)
    (subset? const-decl "bool" list_sets_props nil)
    (equal? const-decl "bool" list_sets_props nil))
   shostak))
 (cons_equal 0
  (cons_equal-1 nil 3577708872
   ("" (grind :rewrites every_forall) nil nil)
   ((equal? const-decl "bool" list_sets_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (subset? const-decl "bool" list_sets_props nil)
    (every_forall formula-decl nil list_basic_props nil)
    (T formal-type-decl nil list_sets_props nil)
    (member def-decl "bool" list_props nil))
   shostak))
 (uniques?_TCC1 0
  (uniques?_TCC1-1 nil 3577713883 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (uniques_TCC1 0
  (uniques_TCC1-1 nil 3577713883 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (uniques? def-decl "bool" list_sets_props nil) nil
    (subset? const-decl "bool" list_sets_props nil)
    (member def-decl "bool" list_props nil)
    (T formal-type-decl nil list_sets_props nil)
    (every_forall formula-decl nil list_basic_props nil)
    (equal? const-decl "bool" list_sets_props nil))
   nil))
 (uniques_TCC2 0
  (uniques_TCC2-1 nil 3577713883 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (uniques_TCC3 0
  (uniques_TCC3-1 nil 3577713883
   (""
    (apply (then
            (grind :exclude equal? :rewrites
             ("cons_equal" "member_equal"))
            (typepred "v!1(t!1)") (grind)))
    nil nil)
   ((member_equal formula-decl nil list_sets_props nil)
    (member def-decl "bool" list_props nil)
    (uniques? def-decl "bool" list_sets_props nil)
    (equal? const-decl "bool" list_sets_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_sets_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (uniques_TCC4 0
  (uniques_TCC4-1 nil 3577713883
   ("" (use "equal_equiv")
    (("" (grind :theories ("orders" "relations") :exclude equal?)
      (("1" (typepred "v!1(t!1)")
        (("1" (grind :rewrites member_equal) nil nil)) nil)
       ("2" (typepred "v!1(t!1)")
        (("2" (use "equal_equiv")
          (("2"
            (grind :theories ("orders" "relations") :exclude equal?
             :rewrites member_equal)
            nil nil))
          nil))
        nil))
      nil))
    nil)
   ((reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil)
    (uniques? def-decl "bool" list_sets_props nil)
    (equal? const-decl "bool" list_sets_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_sets_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member_equal formula-decl nil list_sets_props nil)
    (member def-decl "bool" list_props nil)
    (equal_equiv formula-decl nil list_sets_props nil))
   nil))
 (uniques_filter 0
  (uniques_filter-1 nil 3579486750
   ("" (induct l)
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (rewrite filter_pos_cons 1)
        (("2"
          (case "(LAMBDA i, x:
                    FORALL (j: bl(cons2_var!1)):
                      i < j IMPLIES nth(cons2_var!1, j) /= x) = (LAMBDA (i_1: nat), (x_1: T):
                         FORALL (j: bl(cons(cons1_var!1, cons2_var!1))):
                           1 + i_1 < j IMPLIES
                            nth(cons(cons1_var!1, cons2_var!1), j) /= x_1)")
          (("1" (lift-if)
            (("1" (prop)
              (("1" (rewrite -2)
                (("1" (rewrite -2 :dir rl)
                  (("1" (expand uniques 1 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (use member_nth)
                          (("1" (prop)
                            (("1" (skeep)
                              (("1"
                                (inst - "i+1")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (rewrite -1)
                (("2" (rewrite -1 :dir rl)
                  (("2" (expand uniques 2 1)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("2" (skeep)
                          (("2" (use member_nth)
                            (("2" (prop)
                              (("2"
                                (inst + "j-1")
                                (("1" (grind) nil nil)
                                 ("2"
                                  (typepred j)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1 2)
            (("2" (decompose-equality)
              (("2" (iff)
                (("2" (prop)
                  (("1" (skeep)
                    (("1" (rewrite nth_cons)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (grind) nil nil)
                           ("2" (inst - "j-1")
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred j) (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (inst - "j+1") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (member_nth formula-decl nil list_basic_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_cons formula-decl nil list_basic_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (j skolem-const-decl "bl[T](cons(cons1_var!1, cons2_var!1))"
     list_sets_props nil)
    (cons2_var!1 skolem-const-decl "list[T]" list_sets_props nil)
    (cons1_var!1 skolem-const-decl "T" list_sets_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth_cons formula-decl nil list_basic_props nil)
    (j skolem-const-decl "bl[T](cons(cons1_var!1, cons2_var!1))"
     list_sets_props nil)
    (filter_pos_cons formula-decl nil list_filter_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (partition_pos def-decl "[list[T], list[T]]" list_filter_props nil)
    (partition_char rec-application-judgement "{pp, np |
         FORALL x:
           (member(x, pp) IFF
             (EXISTS (i: bl(l)): nth(l, i) = x AND pi(i, x)))
            AND
            (member(x, np) IFF
              (EXISTS (i: bl(l)): nth(l, i) = x AND NOT pi(i, x)))}"
     list_sets_props nil)
    (filter_pos_char application-judgement "{pp |
         FORALL x:
           (member(x, pp) IFF
             (EXISTS (i: bl(l)): nth(l, i) = x AND pi(i, x)))}"
     list_sets_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_sets_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bl type-eq-decl nil list_basic_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (filter_pos const-decl "list[T]" list_filter_props nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (uniques def-decl "{m: (uniques?) | equal?(m, l)}" list_sets_props
     nil)
    (equal? const-decl "bool" list_sets_props nil)
    (uniques? def-decl "bool" list_sets_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (uniques_uniques 0
  (uniques_uniques-1 nil 3579488142
   ("" (induct-and-simplify l) nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (uniques? def-decl "bool" list_sets_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equal? const-decl "bool" list_sets_props nil)
    (uniques def-decl "{m: (uniques?) | equal?(m, l)}" list_sets_props
     nil)
    (T formal-type-decl nil list_sets_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak)))

