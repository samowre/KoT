(min_max_list
 (min_le 0
  (min_le-1 nil 3578336775
   ("" (typepred <=) (("" (lazy-grind :if-match all) nil nil)) nil)
   ((reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (min const-decl "T" min_max_list nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil min_max_list nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" min_max_list nil))
   shostak))
 (max_ge 0
  (max_ge-1 nil 3578336780
   ("" (typepred <=) (("" (lazy-grind :if-match all) nil nil)) nil)
   ((reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (max const-decl "T" min_max_list nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil min_max_list nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" min_max_list nil))
   shostak))
 (min_min 0
  (min_min-1 nil 3578339040
   ("" (typepred <=)
    (("" (grind :if-match nil)
      (("1" (inst -2 a!1 b!1 c!1) (("1" (grind) nil nil)) nil)
       ("2" (inst -4 a!1 b!1)
        (("2" (inst -2 b!1 a!1 c!1) (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (min const-decl "T" min_max_list nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil min_max_list nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" min_max_list nil))
   shostak))
 (max_max 0
  (max_max-1 nil 3578339046
   ("" (typepred <=)
    (("" (grind :if-match nil)
      (("1" (inst -2 a!1 b!1 c!1) (("1" (grind) nil nil)) nil)
       ("2" (inst -4 a!1 b!1)
        (("2" (inst -2 b!1 a!1 c!1) (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (max const-decl "T" min_max_list nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil min_max_list nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" min_max_list nil))
   shostak))
 (min_aux_TCC1 0
  (min_aux_TCC1-1 nil 3578333407 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil min_max_list nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (member def-decl "bool" list_props nil))
   nil))
 (min_aux_TCC2 0
  (min_aux_TCC2-1 nil 3578333407 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil min_max_list nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil))
   nil))
 (min_aux_TCC3 0
  (min_aux_TCC3-1 nil 3578333407 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil min_max_list nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil))
   nil))
 (min_aux_TCC4 0
  (min_aux_TCC4-1 nil 3578333407
   ("" (grind :if-match nil)
    (("1" (grind :if-match all) nil nil)
     ("2" (inst - "(cdr(l!1),lesseqp!1)")
      (("2" (flatten -2)
        (("2" (inst - "car(cdr(l!1))")
          (("2"
            (inst -5 "car(l!1)" "v!1(cdr(l!1),lesseqp!1)"
             "car(cdr(l!1))")
            (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (inst - "(cdr(l!1),lesseqp!1)")
      (("3" (flatten -2)
        (("3" (inst - b!1)
          (("3" (inst -5 "car(l!1)" "v!1(cdr(l!1),lesseqp!1)" "b!1")
            (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil min_max_list nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil))
   nil))
 (min_aux_TCC5 0
  (min_aux_TCC5-1 nil 3578833492
   ("" (grind :if-match nil)
    (("1" (typepred lesseqp!1) (("1" (grind :if-match all) nil nil))
      nil)
     ("2" (typepred "v!1(cdr(l!1),lesseqp!1)")
      (("2" (grind :if-match all) nil nil)) nil)
     ("3" (typepred "v!1(cdr(l!1),lesseqp!1)")
      (("3" (grind :if-match all) nil nil)) nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil min_max_list nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil))
   nil))
 (min_cons 0
  (min_cons-1 nil 3578336371 ("" (grind) nil nil)
   ((min_aux def-decl
     "{c | member(c, l) AND (FORALL b: member(b, l) IMPLIES c <= b)}"
     min_max_list nil)
    (min const-decl
         "{x | member(x, l) AND (FORALL y: member(y, l) IMPLIES x <= y)}"
         min_max_list nil)
    (min const-decl "T" min_max_list nil))
   shostak))
 (min_append_TCC1 0
  (min_append_TCC1-1 nil 3578333407 ("" (grind) nil nil)
   ((append def-decl "list[T]" list_props nil)) nil))
 (min_append 0
  (min_append-1 nil 3578338444
   ("" (induct-and-simplify l1 :rewrites min_cons :exclude min)
    (("" (expand min 2 4) (("" (grind :exclude min) nil nil)) nil))
    nil)
   ((min_aux def-decl
     "{c | member(c, l) AND (FORALL b: member(b, l) IMPLIES c <= b)}"
     min_max_list nil)
    (min_cons formula-decl nil min_max_list nil)
    (min_min formula-decl nil min_max_list nil)
    (append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" min_max_list nil)
    (min const-decl
         "{x | member(x, l) AND (FORALL y: member(y, l) IMPLIES x <= y)}"
         min_max_list nil)
    (min const-decl "T" min_max_list nil)
    (T formal-type-decl nil min_max_list nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (min_reverse_TCC1 0
  (min_reverse_TCC1-1 nil 3578333407
   ("" (lemma length_reverse[T])
    (("" (lazy-grind :exclude reverse) nil nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length_reverse formula-decl nil list_props nil)
    (T formal-type-decl nil min_max_list nil))
   nil))
 (min_reverse 0
  (min_reverse-1 nil 3578339232
   ("" (grind :rewrites member_reverse :defs nil :if-match nil)
    (("" (all-typepreds)
      (("" (typepred <=)
        (("" (inst - "min(l!1)")
          (("" (hide -4)
            (("" (inst - "min(reverse(l!1))")
              ((""
                (lazy-grind :if-match all :rewrites member_reverse
                 :exclude (reverse min))
                nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" min_max_list nil)
    (min const-decl
         "{x | member(x, l) AND (FORALL y: member(y, l) IMPLIES x <= y)}"
         min_max_list nil)
    (reverse def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (member_reverse formula-decl nil list_basic_props nil)
    (dichotomous? const-decl "bool" orders nil)
    (partial_order? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil min_max_list nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (min_subset 0
  (min_subset-1 nil 3578339560
   ("" (grind :if-match nil :defs nil)
    (("" (all-typepreds)
      (("" (lazy-grind :if-match all :defs nil :rewrites member_subset)
        nil nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" min_max_list nil)
    (min const-decl
         "{x | member(x, l) AND (FORALL y: member(y, l) IMPLIES x <= y)}"
         min_max_list nil)
    (member_subset formula-decl nil list_sets_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil min_max_list nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (min_filter_TCC1 0
  (min_filter_TCC1-1 nil 3578333407
   ("" (skeep)
    (("" (typepred "filter(l,p)")
      (("" (inst - "min(l)")
        (("" (typepred "min(l)") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (filter def-decl "list[T]" filters nil)
    (pred type-eq-decl nil defined_types nil)
    (member def-decl "bool" list_props nil)
    (list type-decl nil list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil min_max_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (filter_member rec-application-judgement
     "{m | FORALL x: member(x, m) IFF p(x) AND member(x, l)}"
     min_max_list nil)
    (min_aux def-decl
     "{c | member(c, l) AND (FORALL b: member(b, l) IMPLIES c <= b)}"
     min_max_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" min_max_list nil)
    (min const-decl
         "{x | member(x, l) AND (FORALL y: member(y, l) IMPLIES x <= y)}"
         min_max_list nil))
   nil))
 (min_filter 0
  (min_filter-2 "to remove" 3578667281
   ("" (typepred <=)
    (("" (grind :if-match nil :exclude (filter min))
      (("" (all-typepreds)
        (("" (inst - "min(filter(l!1,p!1))")
          (("" (hide -3)
            (("" (inst - "min(l!1)")
              (("" (copy -5)
                (("" (inst - "min(filter(l!1,p!1))")
                  (("" (inst - "min(l!1)")
                    ((""
                      (inst -9 "min(l!1)" "min(filter(l!1,p!1))"
                       "min(l!1)")
                      ((""
                        (lazy-grind :if-match all :exclude
                         (min filter))
                        nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (filter_member rec-application-judgement
     "{m | FORALL x: member(x, m) IFF p(x) AND member(x, l)}"
     min_max_list nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl
         "{x | member(x, l) AND (FORALL y: member(y, l) IMPLIES x <= y)}"
         min_max_list nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (filter def-decl "list[T]" filters nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil min_max_list nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" min_max_list nil))
   shostak)
  (min_filter-1 nil 3578339670
   ("" (skeep)
    (("" (all-typepreds)
      (("" (typepred key)
        (("" (grind :if-match all :exclude (filter max)) nil nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil min_max_list nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (pred type-eq-decl nil defined_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (injective? const-decl "bool" functions nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (min_aux def-decl
     "{c | member(c, l) AND (FORALL b: member(b, l) IMPLIES c <= b)}"
     min_max_list nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (max_TCC1 0
  (max_TCC1-1 nil 3578662237
   ("" (typepred <=)
    (("" (grind :if-match nil)
      (("1" (grind :if-match all) nil nil)
       ("2" (grind :if-match all) nil nil)
       ("3" (inst -3 z!1 y!1 x!1) (("3" (grind) nil nil)) nil))
      nil))
    nil)
   ((reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil min_max_list nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" min_max_list nil))
   nil))
 (max_cons 0
  (max_cons-1 nil 3578665377
   ("" (skeep)
    (("" (expand max 1 2)
      (("" (typepred "max(cons(x,l))")
        (("" (lift-if)
          (("" (prop)
            (("1" (typepred "max(l)")
              (("1" (inst - "max(cons(x,l))")
                (("1" (inst - "max(l)")
                  (("1" (expand member -4)
                    (("1" (expand member -5)
                      (("1" (typepred <=)
                        (("1" (grind :if-match all :exclude max) nil
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst - x)
              (("2" (typepred "max(l)")
                (("2" (inst - "max(cons(x,l))")
                  (("2" (typepred <=)
                    (("2" (expand total_order?)
                      (("2" (expand partial_order?)
                        (("2" (expand antisymmetric?)
                          (("2" (flatten -1)
                            (("2" (inst - x "max(cons(x,l))")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl "T" min_max_list nil)
    (min_aux def-decl
     "{c | member(c, l) AND (FORALL b: member(b, l) IMPLIES c <= b)}"
     min_max_list nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil min_max_list nil)
    (list type-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" min_max_list nil)
    (max const-decl
         "{x | member(x, l) AND (FORALL y: member(y, l) IMPLIES y <= x)}"
         min_max_list nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil))
   shostak))
 (max_append 0
  (max_append-1 nil 3578665699
   ("" (induct-and-simplify l1 :rewrites max_cons :exclude max)
    (("" (expand max 2 4) (("" (grind :exclude max) nil nil)) nil))
    nil)
   ((min_aux def-decl
     "{c | member(c, l) AND (FORALL b: member(b, l) IMPLIES c <= b)}"
     min_max_list nil)
    (max_cons formula-decl nil min_max_list nil)
    (max_max formula-decl nil min_max_list nil)
    (append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" min_max_list nil)
    (max const-decl
         "{x | member(x, l) AND (FORALL y: member(y, l) IMPLIES y <= x)}"
         min_max_list nil)
    (max const-decl "T" min_max_list nil)
    (T formal-type-decl nil min_max_list nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (max_reverse 0
  (max_reverse-1 nil 3578665761
   ("" (grind :rewrites member_reverse :defs nil :if-match nil)
    (("" (all-typepreds)
      (("" (typepred <=)
        (("" (hide -4)
          ((""
            (lazy-grind :if-match all :rewrites member_reverse :exclude
             (reverse max))
            nil nil))
          nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" min_max_list nil)
    (max const-decl
         "{x | member(x, l) AND (FORALL y: member(y, l) IMPLIES y <= x)}"
         min_max_list nil)
    (reverse def-decl "list[T]" list_props nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (member_reverse formula-decl nil list_basic_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil min_max_list nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (max_subset 0
  (max_subset-1 nil 3578665936
   ("" (grind :if-match nil :defs nil)
    (("" (all-typepreds)
      (("" (lazy-grind :if-match all :defs nil :rewrites member_subset)
        nil nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" min_max_list nil)
    (max const-decl
         "{x | member(x, l) AND (FORALL y: member(y, l) IMPLIES y <= x)}"
         min_max_list nil)
    (member_subset formula-decl nil list_sets_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil min_max_list nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (max_filter_TCC1 0
  (max_filter_TCC1-1 nil 3578662237
   ("" (skeep)
    (("" (all-typepreds)
      (("" (hide -3)
        (("" (inst -3 "max(l)") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((filter_member rec-application-judgement
     "{m | FORALL x: member(x, m) IFF p(x) AND member(x, l)}"
     min_max_list nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil min_max_list nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (pred type-eq-decl nil defined_types nil)
    (filter def-decl "list[T]" filters nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" min_max_list nil)
    (max const-decl
         "{x | member(x, l) AND (FORALL y: member(y, l) IMPLIES y <= x)}"
         min_max_list nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (min_aux def-decl
     "{c | member(c, l) AND (FORALL b: member(b, l) IMPLIES c <= b)}"
     min_max_list nil)
    (dichotomous? const-decl "bool" orders nil)
    (partial_order? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil))
   nil))
 (max_filter 0
  (max_filter-1 nil 3578666553
   ("" (skeep)
    (("" (all-typepreds)
      (("" (typepred <=)
        (("" (hide -4)
          (("" (grind :if-match all :exclude (filter max)) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((filter_member rec-application-judgement
     "{m | FORALL x: member(x, m) IFF p(x) AND member(x, l)}"
     min_max_list nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil min_max_list nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (pred type-eq-decl nil defined_types nil)
    (filter def-decl "list[T]" filters nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" min_max_list nil)
    (max const-decl
         "{x | member(x, l) AND (FORALL y: member(y, l) IMPLIES y <= x)}"
         min_max_list nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   shostak)))

