

%% Properties on lists of a single type
more_list_props[T: TYPE]: THEORY
BEGIN
  % Import all list theories above
  IMPORTING list_subterm_props[T]
  IMPORTING list_find_props[T]
  IMPORTING list_flatten_props[T]
  
  
  l, m, l1, l2: VAR list[T]
  ll: VAR list[list[T]]
  p: VAR pred[T]
  P: VAR pred[list[T]]
  a, b, c: VAR T
  x, y, z: VAR T



  %% Less usual functions
  % More efficient way to compute append(reverse(l1), l2)
  rev_append(l1, l2): RECURSIVE list[T] =
    CASES l1 OF
      null: l2,
      cons(x, t1): rev_append(t1, cons(x, l2))
    ENDCASES
  MEASURE length(l1)

  % Characterisation of rev_append
  rev_append_char: THEOREM
    rev_append(l1, l2) = append(reverse(l1), l2)
  AUTO_REWRITE rev_append_char
END more_list_props


list2_props[K: TYPE, V: TYPE]: THEORY
BEGIN
  IMPORTING adt_props[list[[K, V]]]
  IMPORTING more_list_props[[K, V]]
  
  k, x: VAR K
  ks, xs: VAR list[K]
  v, y: VAR V
  vs, ys: VAR list[V]
  vf: VAR finseq[V]
  p: VAR [K, V]
  l: VAR list[[K, V]]

  % zip creates a list of pairs from a pair of lists
  zip(ks, (vs | length(vs) = length(ks))):
    RECURSIVE { l | length(l) = length(ks) AND FORALL (i: below(length(ks))): nth(l, i) = (nth(ks, i), nth(vs, i)) } =
    CASES ks OF
      null: null,
      cons(h, t): cons((h, car(vs)), zip(t, cdr(vs)))
    ENDCASES
  MEASURE length(ks)

  has_key(k, l): bool = some(LAMBDA (x: K, y: V): x = k)(l)

  assoc(k, l): lift[{ v | EXISTS (i: below(length(l))): nth(l, i) = (k, v) AND FORALL (j: below(i)): nth(l, i)`1 /= k }] =
    CASES find_elt(l,LAMBDA (x: K, y: V): x = k) OF
      bottom: bottom,
      up(lift): up(lift`2)
    ENDCASES

  assoc_up: THEOREM
    up?(assoc(k, l)) IFF has_key(k, l)

  assoc(k, l, v):
    { y | y = v OR EXISTS (i: below(length(l))): nth(l, i) = (k, y) } =
    CASES assoc(k, l) OF
      bottom: v,
      up(res): res
    ENDCASES

  remove_assoc(k, l): list[[K, V]] =
    filter(l, LAMBDA (x: K, y: V): x /= k)

  remove_assoc_cons: THEOREM
    remove_assoc(k, cons(p, l)) =
      IF k = p`1
        THEN remove_assoc(k, l)
	ELSE cons(p, remove_assoc(k, l))
      ENDIF

  remove_assoc_assoc: THEOREM
    assoc(x, remove_assoc(k, l)) = IF x = k THEN bottom ELSE assoc(x, l) ENDIF
END list2_props

list_map_props[S: TYPE, T: TYPE]: THEORY
BEGIN
  IMPORTING more_list_props
  
  f: VAR [T -> S]
  F: VAR [T -> list[S]]
  l: VAR list[T]
  m: VAR list[S]
  x: VAR T
  s: VAR S

  member_map: THEOREM
    member(x, l) IMPLIES member(f(x), map(f, l))
  
  map_member: THEOREM
    member(s, map(f, l)) IMPLIES (EXISTS x: f(x) = s AND member(x, l))

  mymap(l: list[T], f: [{ x | member(x, l) } -> S]): RECURSIVE list[S] =
    CASES l OF
      null: null,
      cons(h, t): cons(f(h), mymap(t, restrict(f)))
    ENDCASES
  MEASURE l BY <<
END list_map_props
