(finseq_flatten_props
 (flatten_aux_TCC1 0
  (flatten_aux_TCC1-1 nil 3579553737 ("" (subtype-tcc) nil nil) nil
   nil))
 (flatten_aux_TCC2 0
  (flatten_aux_TCC2-1 nil 3579553737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil finseq_flatten_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (flatten_aux_TCC3 0
  (flatten_aux_TCC3-1 nil 3579553737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil finseq_flatten_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (flatten_aux_TCC4 0
  (flatten_aux_TCC4-1 nil 3579553737 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (flatten_TCC1 0
  (flatten_TCC1-1 nil 3579553737 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (flatten_empty 0
  (flatten_empty-1 nil 3579553750 ("" (grind) nil nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)
    (flatten_aux def-decl "finseq[T]" finseq_flatten_props nil)
    (flatten const-decl "finseq[T]" finseq_flatten_props nil))
   shostak))
 (flatten_concat 0
  (flatten_concat-1 nil 3579553755
   (""
    (case "FORALL (ss,tt : finseq[finseq[T]] , i:upto(length(ss)+length(tt))): flatten_aux(ss o tt,i) = IF i < length(ss) THEN flatten_aux(ss,i) o flatten_aux(tt,0) ELSE flatten_aux(tt,i-length(ss)) ENDIF")
    (("1" (skeep)
      (("1" (inst - ss tt 0)
        (("1" (lift-if)
          (("1" (expand flatten)
            (("1" (prop)
              (("1" (use length_null[finseq[T]])
                (("1" (rewrite -1)
                  (("1" (rewrite null_concat)
                    (("1" (expand flatten_aux 2 2)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (rewrite null_concat) nil nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (measure-induct+ "length(ss)+length(tt)-i" (ss tt i))
        (("1" (lift-if)
          (("1" (prop)
            (("1" (inst - x!1 x!2 "x!3+1")
              (("1" (prop)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (expand flatten_aux 1 1)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (grind) nil nil)
                           ("2" (expand flatten_aux 2 2)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (case
                                   "(x!1 o x!2)(x!3) = (x!1)(x!3)")
                                  (("1"
                                    (rewrite -1)
                                    (("1"
                                      (rewrite -2)
                                      (("1" (rewrite o_assoc) nil nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand flatten_aux 2 1)
                      (("2" (expand flatten_aux 2 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (hide -2 1) (("1" (grind) nil nil))
                              nil)
                             ("2" (lift-if)
                              (("2"
                                (prop)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (case
                                   "(x!1 o x!2)(x!3) = (x!1)(x!3)")
                                  (("1"
                                    (rewrite -1)
                                    (("1"
                                      (rewrite -1)
                                      (("1"
                                        (expand flatten_aux 2 2)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (rewrite concat_null)
                                              (("1"
                                                (rewrite -2)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil)
               ("2" (grind) nil nil))
              nil)
             ("2" (inst - x!1 x!2 "x!3+1")
              (("1" (prop)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (grind) nil nil)
                     ("2" (expand flatten_aux +)
                      (("2" (lift-if)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (grind) nil nil)
                             ("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (hide -2 1)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (case
                                   "(x!1 o x!2)(x!3) = (x!2)(x!3-length(x!1))")
                                  (("1"
                                    (rewrite -1)
                                    (("1" (rewrite -1) nil nil))
                                    nil)
                                   ("2" (grind) nil nil)
                                   ("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil) ("3" (grind) nil nil)
         ("4" (grind) nil nil) ("5" (grind) nil nil)
         ("6" (grind) nil nil) ("7" (grind) nil nil)
         ("8" (grind) nil nil) ("9" (grind) nil nil)
         ("10" (grind) nil nil) ("11" (grind) nil nil)
         ("12" (grind) nil nil) ("13" (grind) nil nil)
         ("14" (grind) nil nil) ("15" (grind) nil nil)
         ("16" (grind) nil nil) ("17" (grind) nil nil))
        nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil)
     ("6" (grind) nil nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (O const-decl "finseq" finite_sequences nil)
    (flatten_aux def-decl "finseq[T]" finseq_flatten_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil finseq_flatten_props nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ss skolem-const-decl "finseq[finseq[T]]" finseq_flatten_props nil)
    (tt skolem-const-decl "finseq[finseq[T]]" finseq_flatten_props nil)
    (flatten const-decl "finseq[T]" finseq_flatten_props nil)
    (length_null formula-decl nil finseq_basic_props nil)
    (null_concat formula-decl nil finseq_basic_props nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (o_assoc formula-decl nil finite_sequences nil)
    (concat_null formula-decl nil finseq_basic_props nil)
    (x!1 skolem-const-decl "finseq[finseq[T]]" finseq_flatten_props
     nil)
    (x!2 skolem-const-decl "finseq[finseq[T]]" finseq_flatten_props
     nil)
    (x!3 skolem-const-decl "upto(length(x!1) + length(x!2))"
     finseq_flatten_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak)))

