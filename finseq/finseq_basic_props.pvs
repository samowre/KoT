finseq_basic_props[T:TYPE] : THEORY 
BEGIN
  IMPORTING finseq_adt_props[T]

  s, s1, s2: VAR finseq[T]
  p: VAR PRED[T]
  a,b,c: VAR T
  x,y,z: VAR T
  bl(s): TYPE = below(length(s))
  ul(s): TYPE = upto(length(s))
  c: VAR [nat,nat]
  i,j,k,l: VAR nat


  % Comon list functions
    % Member
  member_aux(x, s, (i: ul(s))): RECURSIVE bool =
    IF i = length(s) THEN FALSE
    ELSE s(i) = x OR member_aux(x, s, i + 1) 
    ENDIF
  MEASURE length(s) - i

  member(x, s): bool = member_aux(x, s, 0)
  member(s)(x): MACRO bool = member(x,s)

    % Append is already defined as o
    % Reverse
  reverse(s): finseq[T] = s WITH [ seq := LAMBDA (i:bl(s)): s(length(s)-1-i) ]

  % Specification
    % All the specification with nth (nth_concat nth_reverse) are inside the definition
    % of the functions (concat reverse etc)

    % member
  member_nth: LEMMA member(x,s) IFF EXISTS (i:bl(s)): s(i)=x
  member_concat: LEMMA member(x,s1 o s2) IFF member(x,s1) OR member(x,s2)
  member_extract: LEMMA member(x,s ^^ c) IMPLIES member(x,s)
  member_reverse: LEMMA member(x,reverse(s)) IFF member(x,s)



  % Basic properties
    % Length (most of properties obtained by definition)
  length_null: LEMMA length(s) = 0 IMPLIES s = empty_seq

    % Concat (concat_assoc in prelude)
  concat_null: LEMMA s o empty_seq = s
  null_concat: LEMMA empty_seq o s = s

  reverse_concat: LEMMA reverse(s1 o s2) = reverse(s2) o reverse(s1)
  concat_extract: LEMMA i<=j AND j<=k IMPLIES
  		     	s ^^ (i, j) o s ^^ (j, k) = s ^^ (i, k)
  
    % Extract 
  extract_all: LEMMA s ^^ (0,length(s)) = s
  reverse_extract: LEMMA FORALL (i,j: bl(s)): 
  		   	 reverse(s ^^ (i,j)) = reverse(s) ^^ (length(s)-j,length(s)-i)
  extract_extract: LEMMA i+l <= j IMPLIES 
  		   	 (s ^^ (i,j)) ^^ (k,l) = s ^^ (k+i,i+l)
  
    % reverse
  reverse_reverse: LEMMA reverse(reverse(s)) = s

    % Every/some
  every_concat : LEMMA every(p)(o(s1,s2)) IFF every(p)(s1) AND every(p)(s2)
  some_concat  : LEMMA some(p)(o(s1,s2))  IFF some(p)(s1)  OR some(p)(s2)
  every_reverse: LEMMA every(p)(reverse(s)) IFF every(p)(s)
  some_reverse : LEMMA some(p)(reverse(s))  IFF some(p)(s)
  every_extract: LEMMA every(p)(s) IMPLIES every(p)(s ^^ c)
  some_extract : LEMMA some(p)(^^(s,c)) IMPLIES some(p)(s)


  % Auto rewrites
  %AUTO_REWRITE member_nth
  % removed because in the case of finseq_sets, you want to work with member

END finseq_basic_props
