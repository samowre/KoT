(finseq_adt_props
 (finseq_extensionality_TCC1 0
  (finseq_extensionality_TCC1-1 nil 3578756439 ("" (grind) nil nil)
   ((bl type-eq-decl nil finseq_adt_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil finseq_adt_props nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (finseq_extensionality 0
  (finseq_extensionality-1 nil 3578757038
   ("" (grind)
    (("" (decompose-equality) (("" (decompose-equality) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil finseq_adt_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (bl type-eq-decl nil finseq_adt_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (every_aux_TCC1 0
  (every_aux_TCC1-1 nil 3578757021 ("" (grind) nil nil) nil nil))
 (every_aux_TCC2 0
  (every_aux_TCC2-1 nil 3578757021 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil finseq_adt_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ul type-eq-decl nil finseq_adt_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (every_aux_TCC3 0
  (every_aux_TCC3-1 nil 3578757021 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil finseq_adt_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ul type-eq-decl nil finseq_adt_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (every_aux_TCC4 0
  (every_aux_TCC4-1 nil 3578757021 ("" (grind) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (every_TCC1 0
  (every_TCC1-1 nil 3578757021 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (some_aux_TCC1 0
  (some_aux_TCC1-1 nil 3578757021 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil finseq_adt_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ul type-eq-decl nil finseq_adt_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (some_aux_TCC2 0
  (some_aux_TCC2-1 nil 3578757021 ("" (termination-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (every_aux_forall_TCC1 0
  (every_aux_forall_TCC1-1 nil 3578757763 ("" (grind) nil nil) nil
   nil))
 (every_aux_forall 0
  (every_aux_forall-1 nil 3578757765
   ("" (measure-induct-and-simplify "length(s)-i" (s i) :if-match nil)
    (("1" (inst - x!1 "x!2+2")
      (("1" (inst - p!1)
        (("1" (prop)
          (("1" (typepred j!1)
            (("1" (inst - j!1) (("1" (grind) nil nil)) nil)) nil)
           ("2" (grind) nil nil) ("3" (grind) nil nil))
          nil))
        nil))
      nil)
     ("2" (inst - x!1 "x!2+1")
      (("1" (inst - p!1)
        (("1" (prop)
          (("1" (expand every_aux +) (("1" (grind) nil nil)) nil)
           ("2" (skeep) (("2" (inst - j) nil nil)) nil)
           ("3" (grind) nil nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil)
     ("3" (typepred j1!1) (("3" (grind) nil nil)) nil)
     ("4" (typepred j1!1) (("4" (grind) nil nil)) nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "finseq[T]" finseq_adt_props nil)
    (x!2 skolem-const-decl "ul(x!1)" finseq_adt_props nil)
    (j!1 skolem-const-decl "subrange(x!2, length(x!1) - 1)"
     finseq_adt_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every_aux def-decl "bool" finseq_adt_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (ul type-eq-decl nil finseq_adt_props nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil finseq_adt_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (some_aux_exists 0
  (some_aux_exists-1 nil 3578759991
   ("" (measure-induct-and-simplify "length(s)-i" (s i) :if-match nil)
    (("1" (inst - x!1 "x!2+1")
      (("1" (inst - p!1)
        (("1" (prop)
          (("1" (skeep) (("1" (inst + j) nil nil)) nil)
           ("2" (expand some_aux -)
            (("2" (prop)
              (("1" (inst 4 x!2)
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil)
           ("3" (grind) nil nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil)
     ("2" (inst - x!1 "x!2+2")
      (("2" (inst - p!1)
        (("2" (prop)
          (("1" (grind) nil nil)
           ("2" (inst + j!1) (("2" (grind) nil nil)) nil)
           ("3" (grind) nil nil))
          nil))
        nil))
      nil)
     ("3" (typepred j1!1) (("3" (grind) nil nil)) nil)
     ("4" (typepred j1!1) (("4" (grind) nil nil)) nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (j!1 skolem-const-decl "subrange(x!2, length(x!1) - 1)"
     finseq_adt_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "finseq[T]" finseq_adt_props nil)
    (x!2 skolem-const-decl "ul(x!1)" finseq_adt_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (some_aux def-decl "bool" finseq_adt_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (ul type-eq-decl nil finseq_adt_props nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil finseq_adt_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (every_forall 0
  (every_forall-1 nil 3578760313
   ("" (skeep)
    (("" (expand every)
      (("" (use every_aux_forall)
        (("" (prop)
          (("1" (skeep) (("1" (inst - i) nil nil)) nil)
           ("2" (skeep) (("2" (inst - j) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((every const-decl "bool" finseq_adt_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (bl type-eq-decl nil finseq_adt_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (T formal-type-decl nil finseq_adt_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (ul type-eq-decl nil finseq_adt_props nil)
    (every_aux_forall formula-decl nil finseq_adt_props nil))
   shostak))
 (some_exists 0
  (some_exists-1 nil 3578763764
   ("" (skeep)
    (("" (expand some)
      (("" (use some_aux_exists)
        (("" (prop)
          (("1" (skeep) (("1" (inst + j) nil nil)) nil)
           ("2" (skeep) (("2" (inst + i) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((some const-decl "bool" finseq_adt_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (bl type-eq-decl nil finseq_adt_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (T formal-type-decl nil finseq_adt_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (ul type-eq-decl nil finseq_adt_props nil)
    (some_aux_exists formula-decl nil finseq_adt_props nil))
   shostak))
 (suffix?_TCC1 0
  (suffix?_TCC1-1 nil 3578757021 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (every_neg 0
  (every_neg-1 nil 3578757225
   (""
    (grind :exclude (every some) :rewrites (every_forall some_exists))
    nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil finseq_adt_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (bl type-eq-decl nil finseq_adt_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (every_forall formula-decl nil finseq_adt_props nil)
    (some_exists formula-decl nil finseq_adt_props nil))
   shostak))
 (every_conjuct 0
  (every_conjuct-1 nil 3578764200
   (""
    (grind :exclude (every some) :rewrites (every_forall some_exists))
    nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil finseq_adt_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (bl type-eq-decl nil finseq_adt_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (every_forall formula-decl nil finseq_adt_props nil))
   shostak))
 (every_disjunct 0
  (every_disjunct-1 nil 3578764235
   (""
    (grind :exclude (every some) :rewrites (every_forall some_exists))
    nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bl type-eq-decl nil finseq_adt_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil finseq_adt_props nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (every_forall formula-decl nil finseq_adt_props nil))
   shostak))
 (every_imp 0
  (every_imp-1 nil 3578764240
   (""
    (grind :exclude (every some) :rewrites (every_forall some_exists))
    nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bl type-eq-decl nil finseq_adt_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil finseq_adt_props nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (every_forall formula-decl nil finseq_adt_props nil))
   shostak))
 (some_neg 0
  (some_neg-1 nil 3578764255
   (""
    (grind :exclude (every some) :rewrites (every_forall some_exists))
    nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil finseq_adt_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (bl type-eq-decl nil finseq_adt_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (some_exists formula-decl nil finseq_adt_props nil)
    (every_forall formula-decl nil finseq_adt_props nil))
   shostak))
 (some_conjuct 0
  (some_conjuct-1 nil 3578764259
   (""
    (grind :exclude (every some) :rewrites (every_forall some_exists))
    nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bl type-eq-decl nil finseq_adt_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil finseq_adt_props nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (some_exists formula-decl nil finseq_adt_props nil))
   shostak))
 (some_disjunct 0
  (some_disjunct-1 nil 3578764263
   (""
    (grind :exclude (every some) :rewrites (every_forall some_exists))
    nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil finseq_adt_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (bl type-eq-decl nil finseq_adt_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (some_exists formula-decl nil finseq_adt_props nil))
   shostak))
 (some_imp 0
  (some_imp-1 nil 3578764266
   (""
    (grind :exclude (every some) :rewrites (every_forall some_exists))
    nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bl type-eq-decl nil finseq_adt_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil finseq_adt_props nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (some_exists formula-decl nil finseq_adt_props nil))
   shostak))
 (suffix_reflexive 0
  (suffix_reflexive-1 nil 3578757021
   ("" (grind)
    (("1" (decompose-equality)
      (("1" (decompose-equality) (("1" (grind) nil nil)) nil)
       ("2" (grind) nil nil))
      nil)
     ("2" (decompose-equality) (("2" (decompose-equality) nil nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon const-decl "T" epsilons nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil finseq_adt_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (reflexive? const-decl "bool" relations nil)
    (suffix? const-decl "bool" finseq_adt_props nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil))
 (suffix_transitive 0
  (suffix_transitive-1 nil 3578757021 ("" (grind) nil nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (suffix? const-decl "bool" finseq_adt_props nil)
    (transitive? const-decl "bool" relations nil)
    (suffix_reflexive name-judgement "(reflexive?[finseq[T]])"
     finseq_adt_props nil))
   nil))
 (suffix_antisymmetric 0
  (suffix_antisymmetric-1 nil 3578757021
   ("" (expand (antisymmetric? suffix?))
    (("" (skeep)
      (("" (decompose-equality 1)
        (("" (decompose-equality 1) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil finseq_adt_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (antisymmetric? const-decl "bool" relations nil)
    (suffix? const-decl "bool" finseq_adt_props nil))
   nil))
 (suffix_po 0
  (suffix_po-1 nil 3578757021 ("" (grind) nil nil)
   ((suffix_antisymmetric name-judgement "(antisymmetric?[finseq[T]])"
     finseq_adt_props nil)
    (suffix_transitive name-judgement "(transitive?[finseq[T]])"
     finseq_adt_props nil)
    (suffix_reflexive name-judgement "(reflexive?[finseq[T]])"
     finseq_adt_props nil)
    (partial_order? const-decl "bool" orders nil)
    (preorder? const-decl "bool" orders nil))
   nil)))
(more_finseq_props
 (member_aux_TCC1 0
  (member_aux_TCC1-1 nil 3578757022 ("" (subtype-tcc) nil nil) nil
   nil))
 (member_aux_TCC2 0
  (member_aux_TCC2-1 nil 3578757022 ("" (subtype-tcc) nil nil) nil
   nil))
 (member_aux_TCC3 0
  (member_aux_TCC3-1 nil 3578757022 ("" (subtype-tcc) nil nil) nil
   nil))
 (member_aux_TCC4 0
  (member_aux_TCC4-1 nil 3578757022 ("" (termination-tcc) nil nil) nil
   nil))
 (member_TCC1 0
  (member_TCC1-1 nil 3578757022 ("" (subtype-tcc) nil nil) nil nil))
 (reverse_TCC1 0
  (reverse_TCC1-1 nil 3578757022 ("" (subtype-tcc) nil nil) nil nil))
 (uniques_aux?_TCC1 0
  (uniques_aux?_TCC1-1 nil 3578757022 ("" (subtype-tcc) nil nil) nil
   nil))
 (uniques_aux?_TCC2 0
  (uniques_aux?_TCC2-1 nil 3578757022 ("" (subtype-tcc) nil nil) nil
   nil))
 (uniques_aux?_TCC3 0
  (uniques_aux?_TCC3-1 nil 3578757022 ("" (subtype-tcc) nil nil) nil
   nil))
 (uniques_aux?_TCC4 0
  (uniques_aux?_TCC4-1 nil 3578757022 ("" (termination-tcc) nil nil)
   nil nil))
 (uniques?_TCC1 0
  (uniques?_TCC1-1 nil 3578757022 ("" (subtype-tcc) nil nil) nil nil))
 (findi_TCC1 0
  (findi_TCC1-1 nil 3578757022 ("" (termination-tcc) nil nil) nil nil))
 (findi_exists_TCC1 0
  (findi_exists_TCC1-1 nil 3578757022 ("" (subtype-tcc) nil nil) nil
   nil))
 (reverse_extract_TCC1 0
  (reverse_extract_TCC1-1 nil 3578757022 ("" (subtype-tcc) nil nil) nil
   nil))
 (reverse_extract_TCC2 0
  (reverse_extract_TCC2-1 nil 3578757022 ("" (subtype-tcc) nil nil) nil
   nil)))

