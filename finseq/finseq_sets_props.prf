(finseq_sets_props
 (member_subset 0
  (member_subset-1 nil 3579610287
   ("" (auto-rewrite member_nth)
    (("" (skeep)
      (("" (expand subset?)
        (("" (rewrite every_forall)
          (("" (prop)
            (("1" (skeep)
              (("1" (rewrites member_nth)
                (("1" (rewrites member_nth)
                  (("1" (skeep)
                    (("1" (inst - i)
                      (("1" (skeep)
                        (("1" (inst + i_1) (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (inst - "s1(i)")
                (("2" (rewrites member_nth)
                  (("2" (rewrites member_nth)
                    (("2" (prop) (("2" (inst + i) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((every_forall formula-decl nil finseq_adt_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (member const-decl "bool" finseq_basic_props nil)
    (T formal-type-decl nil finseq_sets_props nil)
    (member_nth formula-decl nil finseq_basic_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (bl type-eq-decl nil finseq_adt_props nil)
    (bl type-eq-decl nil finseq_basic_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (subset? const-decl "bool" finseq_sets_props nil))
   shostak))
 (subset_order 0
  (subset_order-1 nil 3579610514
   ("" (grind :if-match nil :rewrites every_forall :exclude member)
    (("1" (inst - i!1)
      (("1" (skeep)
        (("1" (inst - i)
          (("1" (skeep)
            (("1" (inst + i_2) (("1" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("2" (inst + i!1) nil nil))
    nil)
   ((bl type-eq-decl nil finseq_basic_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (bl type-eq-decl nil finseq_adt_props nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (subset? const-decl "bool" finseq_sets_props nil)
    (every_forall formula-decl nil finseq_adt_props nil)
    (member_nth formula-decl nil finseq_basic_props nil)
    (T formal-type-decl nil finseq_sets_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (subset_null 0
  (subset_null-1 nil 3579610674 ("" (grind) nil nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)
    (T formal-type-decl nil finseq_sets_props nil)
    (member const-decl "bool" finseq_basic_props nil)
    (every_aux def-decl "bool" finseq_adt_props nil)
    (every const-decl "bool" finseq_adt_props nil)
    (subset? const-decl "bool" finseq_sets_props nil))
   shostak))
 (member_equal 0
  (member_equal-1 nil 3579610679
   ("" (grind :rewrites member_subset :exclude (subset? member)) nil
    nil)
   ((T formal-type-decl nil finseq_sets_props nil)
    (member_subset formula-decl nil finseq_sets_props nil)
    (equal? const-decl "bool" finseq_sets_props nil))
   shostak))
 (equal_reflexive 0
  (equal_reflexive-1 nil 3579610928
   ("" (grind :rewrites member_equal) nil nil)
   ((member_equal formula-decl nil finseq_sets_props nil)
    (member const-decl "bool" finseq_basic_props nil)
    (T formal-type-decl nil finseq_sets_props nil))
   shostak))
 (equal_transitive 0
  (equal_transitive-1 nil 3579610945
   ("" (grind :rewrites member_equal) nil nil)
   ((member_equal formula-decl nil finseq_sets_props nil)
    (member const-decl "bool" finseq_basic_props nil)
    (T formal-type-decl nil finseq_sets_props nil))
   shostak))
 (equal_symmetric 0
  (equal_symmetric-1 nil 3579610978
   ("" (grind :rewrites member_equal) nil nil)
   ((member_equal formula-decl nil finseq_sets_props nil)
    (member const-decl "bool" finseq_basic_props nil)
    (T formal-type-decl nil finseq_sets_props nil))
   shostak))
 (equal_equiv 0
  (equal_equiv-1 nil 3579610983
   ("" (use equal_reflexive)
    (("" (use equal_transitive)
      (("" (use equal_symmetric)
        (("" (lazy-grind :if-match all :exclude equal?) nil nil)) nil))
      nil))
    nil)
   ((equal_transitive formula-decl nil finseq_sets_props nil)
    (equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (equal_symmetric formula-decl nil finseq_sets_props nil)
    (equal_reflexive formula-decl nil finseq_sets_props nil))
   shostak)))

