finseq_adt_props [T:TYPE]: THEORY
BEGIN
  s, s1, s2: VAR finseq[T]
  p,q: VAR PRED[T]
  a,b,c: VAR T
  x,y,z: VAR T

  bl(s): TYPE = below(length(s))
  ul(s): TYPE = upto(length(s))
 
  
  % Adt file
    % Extensionality
  finseq_extensionality: LEMMA 
  	s1 = s2 IFF
   	(length(s1) = length(s2) AND
	 FORALL (i:bl(s1)): s1(i)=s2(i))
 
    % Every Some
  every_aux(p,s,(i:ul(s))): RECURSIVE bool = 
  	IF i=length(s) THEN TRUE
 	ELSE p(s(i)) AND every_aux(p,s,i+1)
	ENDIF
  MEASURE length(s) - i
  every(p, s): bool = every_aux(p,s,0)
  every(p)(s): MACRO bool = every(p,s)

  some_aux(p,s,(i:ul(s))): RECURSIVE bool = 
  	IF i=length(s) THEN FALSE
 	ELSE p(s(i)) OR some_aux(p,s,i+1)
	ENDIF
  MEASURE length(s) - i
  some(p, s): bool = some_aux(p,s,0)
  some(p)(s): MACRO bool = some(p,s)

   % every some characterisation
  every_aux_forall: LEMMA FORALL (i:ul(s)): 
  		    	  every_aux(p,s,i) IFF 
  		    	  FORALL (j:subrange(i,length(s)-1)): p(s(j))
  some_aux_exists:  LEMMA FORALL (i:ul(s)):
  		    	  some_aux(p,s,i) IFF 
  		    	  EXISTS (j:subrange(i,length(s)-1)): p(s(j))

  every_forall: LEMMA every(p)(s) IFF FORALL (i:bl(s)): p(s(i))
  some_exists:  LEMMA some(p)(s) IFF EXISTS (i:bl(s)): p(s(i))

    % Suffix (= subterm)
  suffix?(s1,s2): bool =
  	length(s1) <= length(s2) AND
	s1 = ^^(s2,(length(s2)-length(s1),length(s2)))

  % Adt props
 
   CONVERSION+ K_conversion
  
  every_neg: THEOREM
    every(NOT p)(s) IFF NOT some(p)(s)

  every_conjuct: THEOREM
    every(p AND q)(s) IFF every(p)(s) AND every(q)(s)

  every_disjunct: THEOREM
    every(p)(s) OR every(q)(s) IMPLIES every(p OR q)(s)

  every_imp: THEOREM
    (FORALL x: p(x) => q(x)) AND every(p)(s) IMPLIES every(q)(s)

  some_neg: THEOREM
    some(NOT p)(s) IFF NOT every(p)(s)
    
  some_conjuct: THEOREM
    some(p AND q)(s) IMPLIES some(p)(s) AND some(q)(s)

  some_disjunct: THEOREM
    some(p OR q)(s) IFF some(p)(s) OR some(q)(s)

  some_imp: THEOREM
    (FORALL x: p(x) => q(x)) AND some(p)(s) IMPLIES some(q)(s)

  CONVERSION- K_conversion

  % Properties on subterm
  suffix_reflexive: JUDGEMENT suffix? HAS_TYPE (reflexive?[finseq[T]])
  suffix_transitive: JUDGEMENT suffix? HAS_TYPE (transitive?[finseq[T]])
  suffix_antisymmetric: JUDGEMENT suffix? HAS_TYPE (antisymmetric?[finseq[T]])
  suffix_po: JUDGEMENT suffix? HAS_TYPE (partial_order?[finseq[T]])


END finseq_adt_props

